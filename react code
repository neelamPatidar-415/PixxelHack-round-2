import React, { useState, useEffect } from 'react';
import { TrendingUp, TrendingDown, DollarSign, Award, Target, ArrowRight, Play, BookOpen, User, BarChart3 } from 'lucide-react';

const DematSimulator = () => {
  const [currentPage, setCurrentPage] = useState('onboarding');
  const [selectedStock, setSelectedStock] = useState(null);
  const [quantity, setQuantity] = useState(1);
  const [portfolio, setPortfolio] = useState([]);
  const [balance, setBalance] = useState(100000); // Starting with ₹1,00,000
  const [missions, setMissions] = useState([
    { id: 1, title: "Make your first trade", completed: false, reward: "₹500 bonus" },
    { id: 2, title: "Buy 5 different stocks", completed: false, reward: "Diversification Badge" },
    { id: 3, title: "Hold stocks for 24 hours", completed: false, reward: "Patient Investor Badge" }
  ]);

  // Mock stock data - in production, this would come from your backend API
  const [stocks, setStocks] = useState([
    { symbol: 'RELIANCE', name: 'Reliance Industries', price: 2456.75, change: 2.34, changePercent: 0.95 },
    { symbol: 'TCS', name: 'Tata Consultancy Services', price: 3892.50, change: -45.25, changePercent: -1.15 },
    { symbol: 'HDFCBANK', name: 'HDFC Bank', price: 1678.90, change: 15.80, changePercent: 0.95 },
    { symbol: 'INFY', name: 'Infosys', price: 1834.25, change: 12.45, changePercent: 0.68 },
    { symbol: 'ICICIBANK', name: 'ICICI Bank', price: 1245.60, change: -8.90, changePercent: -0.71 },
    { symbol: 'HINDUNILVR', name: 'Hindustan Unilever', price: 2567.30, change: 21.75, changePercent: 0.85 },
    { symbol: 'ITC', name: 'ITC Limited', price: 456.80, change: 3.20, changePercent: 0.70 },
    { symbol: 'BAJFINANCE', name: 'Bajaj Finance', price: 7234.50, change: -89.25, changePercent: -1.22 }
  ]);

  const [coachTips] = useState([
    "💡 Start with blue-chip stocks for safer investments",
    "📊 Always check the company's fundamentals before buying",
    "⏰ Don't panic sell during market dips - stay calm!",
    "🎯 Diversify your portfolio across different sectors",
    "📈 Long-term investing often beats short-term trading",
    "💰 Never invest money you can't afford to lose",
    "🔍 Research before you invest - knowledge is power!",
    "📉 Market volatility is normal - don't fear it",
    "🏦 Consider the company's debt-to-equity ratio",
    "📱 Keep learning - the market rewards educated investors"
  ]);

  const [currentTip, setCurrentTip] = useState(0);

  // Simulate real-time price updates
  useEffect(() => {
    const interval = setInterval(() => {
      setStocks(prev => prev.map(stock => ({
        ...stock,
        price: stock.price + (Math.random() - 0.5) * 10,
        change: (Math.random() - 0.5) * 20,
        changePercent: (Math.random() - 0.5) * 2
      })));
    }, 5000);

    return () => clearInterval(interval);
  }, []);

  // Rotate coach tips
  useEffect(() => {
    const tipInterval = setInterval(() => {
      setCurrentTip(prev => (prev + 1) % coachTips.length);
    }, 8000);

    return () => clearInterval(tipInterval);
  }, [coachTips.length]);

  const executeTrade = (action) => {
    if (!selectedStock || quantity <= 0) return;

    const totalAmount = selectedStock.price * quantity;
    
    if (action === 'buy' && totalAmount > balance) {
      alert('Insufficient balance!');
      return;
    }

    const trade = {
      id: Date.now(),
      stock: selectedStock,
      quantity,
      action,
      price: selectedStock.price,
      amount: totalAmount,
      timestamp: new Date()
    };

    if (action === 'buy') {
      setBalance(prev => prev - totalAmount);
      setPortfolio(prev => {
        const existing = prev.find(p => p.symbol === selectedStock.symbol);
        if (existing) {
          return prev.map(p => 
            p.symbol === selectedStock.symbol 
              ? { ...p, quantity: p.quantity + quantity, avgPrice: ((p.avgPrice * p.quantity) + totalAmount) / (p.quantity + quantity) }
              : p
          );
        }
        return [...prev, { ...selectedStock, quantity, avgPrice: selectedStock.price }];
      });
    } else {
      const holding = portfolio.find(p => p.symbol === selectedStock.symbol);
      if (!holding || holding.quantity < quantity) {
        alert('Insufficient shares to sell!');
        return;
      }
      
      setBalance(prev => prev + totalAmount);
      setPortfolio(prev => 
        prev.map(p => 
          p.symbol === selectedStock.symbol 
            ? { ...p, quantity: p.quantity - quantity }
            : p
        ).filter(p => p.quantity > 0)
      );
    }

    // Check missions
    setMissions(prev => prev.map(mission => {
      if (mission.id === 1 && !mission.completed) {
        return { ...mission, completed: true };
      }
      if (mission.id === 2 && portfolio.length >= 4 && !mission.completed) {
        return { ...mission, completed: true };
      }
      return mission;
    }));

    setCurrentPage('result');
  };

  const OnboardingPage = () => (
    <div className="min-h-screen bg-gradient-to-br from-blue-900 via-purple-900 to-indigo-900 flex items-center justify-center p-4">
      <div className="max-w-2xl text-center text-white space-y-8">
        <div className="space-y-4">
          <div className="text-6xl mb-4">📈</div>
          <h1 className="text-5xl font-bold bg-gradient-to-r from-green-400 to-blue-400 bg-clip-text text-transparent">
            Open Your First Demat & Start Trading
          </h1>
          <p className="text-xl text-gray-300 max-w-lg mx-auto">
            Learn stock trading with zero risk. Practice with real market data before investing real money.
          </p>
        </div>
        
        <div className="grid grid-cols-1 md:grid-cols-3 gap-6 my-12">
          <div className="bg-white/10 backdrop-blur-sm rounded-xl p-6 border border-white/20">
            <BarChart3 className="w-8 h-8 text-green-400 mb-3 mx-auto" />
            <h3 className="font-semibold mb-2">Real Market Data</h3>
            <p className="text-sm text-gray-300">Practice with live NSE/BSE prices</p>
          </div>
          <div className="bg-white/10 backdrop-blur-sm rounded-xl p-6 border border-white/20">
            <Target className="w-8 h-8 text-blue-400 mb-3 mx-auto" />
            <h3 className="font-semibold mb-2">Mission Based</h3>
            <p className="text-sm text-gray-300">Complete challenges & earn badges</p>
          </div>
          <div className="bg-white/10 backdrop-blur-sm rounded-xl p-6 border border-white/20">
            <BookOpen className="w-8 h-8 text-purple-400 mb-3 mx-auto" />
            <h3 className="font-semibold mb-2">AI Coach Tips</h3>
            <p className="text-sm text-gray-300">Get guidance from our trading bot</p>
          </div>
        </div>

        <button 
          onClick={() => setCurrentPage('simulator')}
          className="bg-gradient-to-r from-green-500 to-green-600 hover:from-green-600 hover:to-green-700 text-white font-bold py-4 px-8 rounded-full text-xl transform transition hover:scale-105 shadow-lg flex items-center gap-3 mx-auto"
        >
          <Play className="w-6 h-6" />
          Start Simulation
        </button>
        
        <p className="text-sm text-gray-400">
          No signup required • Practice with ₹1,00,000 virtual money
        </p>
      </div>
    </div>
  );

  const SimulatorPage = () => (
    <div className="min-h-screen bg-gray-50">
      {/* Header */}
      <div className="bg-white shadow-sm border-b">
        <div className="max-w-7xl mx-auto px-4 py-4">
          <div className="flex justify-between items-center">
            <h1 className="text-2xl font-bold text-gray-800">Trading Simulator</h1>
            <div className="flex items-center gap-4">
              <div className="bg-green-100 text-green-800 px-3 py-1 rounded-lg font-medium">
                Balance: ₹{balance.toLocaleString('en-IN')}
              </div>
              <div className="bg-blue-100 text-blue-800 px-3 py-1 rounded-lg font-medium">
                Portfolio: {portfolio.length} stocks
              </div>
            </div>
          </div>
        </div>
      </div>

      <div className="max-w-7xl mx-auto p-4">
        <div className="grid grid-cols-1 lg:grid-cols-4 gap-6">
          
          {/* Stock List Panel */}
          <div className="lg:col-span-1">
            <div className="bg-white rounded-xl shadow-sm border p-4">
              <h2 className="text-lg font-semibold mb-4 flex items-center gap-2">
                <TrendingUp className="w-5 h-5 text-green-500" />
                Live Stocks
              </h2>
              <div className="space-y-2 max-h-96 overflow-y-auto">
                {stocks.map(stock => (
                  <div 
                    key={stock.symbol}
                    onClick={() => setSelectedStock(stock)}
                    className={`p-3 rounded-lg cursor-pointer transition-colors ${
                      selectedStock?.symbol === stock.symbol 
                        ? 'bg-blue-50 border border-blue-200' 
                        : 'hover:bg-gray-50 border border-transparent'
                    }`}
                  >
                    <div className="flex justify-between items-center">
                      <div>
                        <div className="font-semibold text-sm">{stock.symbol}</div>
                        <div className="text-xs text-gray-500 truncate">{stock.name}</div>
                      </div>
                      <div className="text-right">
                        <div className="font-semibold">₹{stock.price.toFixed(2)}</div>
                        <div className={`text-xs ${stock.change >= 0 ? 'text-green-600' : 'text-red-600'}`}>
                          {stock.change >= 0 ? '+' : ''}{stock.changePercent.toFixed(2)}%
                        </div>
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            </div>
          </div>

          {/* Trading Panel */}
          <div className="lg:col-span-2">
            <div className="bg-white rounded-xl shadow-sm border p-6">
              <h2 className="text-lg font-semibold mb-4">Trading Panel</h2>
              
              {selectedStock ? (
                <div className="space-y-6">
                  <div className="bg-gray-50 rounded-lg p-4">
                    <div className="flex justify-between items-center">
                      <div>
                        <h3 className="text-lg font-bold">{selectedStock.symbol}</h3>
                        <p className="text-sm text-gray-600">{selectedStock.name}</p>
                      </div>
                      <div className="text-right">
                        <div className="text-2xl font-bold">₹{selectedStock.price.toFixed(2)}</div>
                        <div className={`text-sm ${selectedStock.change >= 0 ? 'text-green-600' : 'text-red-600'}`}>
                          {selectedStock.change >= 0 ? '+' : ''}{selectedStock.change.toFixed(2)} ({selectedStock.changePercent.toFixed(2)}%)
                        </div>
                      </div>
                    </div>
                  </div>

                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">Quantity</label>
                    <input 
                      type="number" 
                      value={quantity}
                      onChange={(e) => setQuantity(Math.max(1, parseInt(e.target.value) || 1))}
                      className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                      min="1"
                    />
                  </div>

                  <div className="bg-blue-50 p-4 rounded-lg">
                    <div className="flex justify-between text-sm">
                      <span>Total Amount:</span>
                      <span className="font-semibold">₹{(selectedStock.price * quantity).toLocaleString('en-IN')}</span>
                    </div>
                  </div>

                  <div className="flex gap-4">
                    <button 
                      onClick={() => executeTrade('buy')}
                      className="flex-1 bg-green-600 hover:bg-green-700 text-white font-semibold py-3 px-6 rounded-lg transition-colors flex items-center justify-center gap-2"
                    >
                      <TrendingUp className="w-5 h-5" />
                      BUY
                    </button>
                    <button 
                      onClick={() => executeTrade('sell')}
                      className="flex-1 bg-red-600 hover:bg-red-700 text-white font-semibold py-3 px-6 rounded-lg transition-colors flex items-center justify-center gap-2"
                    >
                      <TrendingDown className="w-5 h-5" />
                      SELL
                    </button>
                  </div>
                </div>
              ) : (
                <div className="text-center py-12 text-gray-500">
                  <BarChart3 className="w-12 h-12 mx-auto mb-4 text-gray-300" />
                  <p>Select a stock from the left panel to start trading</p>
                </div>
              )}
            </div>
          </div>

          {/* Coach & Portfolio Panel */}
          <div className="lg:col-span-1 space-y-6">
            
            {/* Coach Bot */}
            <div className="bg-white rounded-xl shadow-sm border p-4">
              <h3 className="text-lg font-semibold mb-3 flex items-center gap-2">
                <User className="w-5 h-5 text-blue-500" />
                Coach Bot
              </h3>
              <div className="bg-blue-50 p-4 rounded-lg">
                <p className="text-sm text-blue-800">{coachTips[currentTip]}</p>
              </div>
            </div>

            {/* Missions */}
            <div className="bg-white rounded-xl shadow-sm border p-4">
              <h3 className="text-lg font-semibold mb-3 flex items-center gap-2">
                <Award className="w-5 h-5 text-yellow-500" />
                Missions
              </h3>
              <div className="space-y-3">
                {missions.map(mission => (
                  <div key={mission.id} className={`p-3 rounded-lg ${mission.completed ? 'bg-green-50 border border-green-200' : 'bg-gray-50'}`}>
                    <div className="flex items-center gap-2 mb-1">
                      <div className={`w-4 h-4 rounded-full ${mission.completed ? 'bg-green-500' : 'bg-gray-300'}`}></div>
                      <span className="text-sm font-medium">{mission.title}</span>
                    </div>
                    <p className="text-xs text-gray-600">{mission.reward}</p>
                  </div>
                ))}
              </div>
            </div>

            {/* Portfolio */}
            {portfolio.length > 0 && (
              <div className="bg-white rounded-xl shadow-sm border p-4">
                <h3 className="text-lg font-semibold mb-3">Your Portfolio</h3>
                <div className="space-y-2">
                  {portfolio.map(holding => {
                    const currentStock = stocks.find(s => s.symbol === holding.symbol);
                    const currentValue = currentStock ? currentStock.price * holding.quantity : 0;
                    const investedValue = holding.avgPrice * holding.quantity;
                    const pnl = currentValue - investedValue;
                    
                    return (
                      <div key={holding.symbol} className="p-2 bg-gray-50 rounded">
                        <div className="flex justify-between items-center">
                          <div>
                            <div className="text-sm font-medium">{holding.symbol}</div>
                            <div className="text-xs text-gray-500">{holding.quantity} shares</div>
                          </div>
                          <div className="text-right">
                            <div className="text-sm font-semibold">₹{currentValue.toFixed(2)}</div>
                            <div className={`text-xs ${pnl >= 0 ? 'text-green-600' : 'text-red-600'}`}>
                              {pnl >= 0 ? '+' : ''}₹{pnl.toFixed(2)}
                            </div>
                          </div>
                        </div>
                      </div>
                    );
                  })}
                </div>
              </div>
            )}
          </div>
        </div>
      </div>
    </div>
  );

  const ResultPage = () => {
    const totalPortfolioValue = portfolio.reduce((sum, holding) => {
      const currentStock = stocks.find(s => s.symbol === holding.symbol);
      return sum + (currentStock ? currentStock.price * holding.quantity : 0);
    }, 0);

    const totalInvestment = 100000 - balance;
    const totalPnL = (balance + totalPortfolioValue) - 100000;

    return (
      <div className="min-h-screen bg-gradient-to-br from-green-900 via-emerald-900 to-teal-900 flex items-center justify-center p-4">
        <div className="max-w-2xl text-center text-white space-y-8">
          <div className="space-y-4">
            <div className="text-6xl mb-4">{totalPnL >= 0 ? '🎉' : '📊'}</div>
            <h1 className="text-4xl font-bold">
              {totalPnL >= 0 ? 'Great Job!' : 'Learning Experience!'}
            </h1>
            
            <div className="grid grid-cols-1 md:grid-cols-3 gap-4 my-8">
              <div className="bg-white/10 backdrop-blur-sm rounded-xl p-4 border border-white/20">
                <div className="text-2xl font-bold">₹{balance.toLocaleString('en-IN')}</div>
                <div className="text-sm text-gray-300">Cash Balance</div>
              </div>
              <div className="bg-white/10 backdrop-blur-sm rounded-xl p-4 border border-white/20">
                <div className="text-2xl font-bold">₹{totalPortfolioValue.toLocaleString('en-IN')}</div>
                <div className="text-sm text-gray-300">Portfolio Value</div>
              </div>
              <div className="bg-white/10 backdrop-blur-sm rounded-xl p-4 border border-white/20">
                <div className={`text-2xl font-bold ${totalPnL >= 0 ? 'text-green-400' : 'text-red-400'}`}>
                  {totalPnL >= 0 ? '+' : ''}₹{totalPnL.toFixed(2)}
                </div>
                <div className="text-sm text-gray-300">Total P&L</div>
              </div>
            </div>

            <div className="bg-white/10 backdrop-blur-sm rounded-xl p-6 border border-white/20 text-left">
              <h3 className="text-lg font-semibold mb-3">📚 Key Learning Points</h3>
              <ul className="space-y-2 text-sm">
                {totalPnL >= 0 ? (
                  <>
                    <li>✅ You made profitable trades! This shows good stock selection.</li>
                    <li>✅ Remember: Past performance doesn't guarantee future results.</li>
                    <li>✅ Consider diversifying across different sectors for lower risk.</li>
                  </>
                ) : (
                  <>
                    <li>📖 Market volatility is normal - losses are part of learning.</li>
                    <li>📖 Research companies thoroughly before investing real money.</li>
                    <li>📖 Consider long-term investing instead of short-term trading.</li>
                  </>
                )}
              </ul>
            </div>
          </div>

          <div className="space-y-4">
            <p className="text-lg text-gray-200">
              Ready to start your real trading journey?
            </p>
            
            <div className="flex flex-col sm:flex-row gap-4 justify-center">
              <button 
                onClick={() => {
                  window.open('https://zerodha.com/open-account?c=ZXARJD', '_blank');
                }}
                className="bg-gradient-to-r from-blue-500 to-blue-600 hover:from-blue-600 hover:to-blue-700 text-white font-bold py-3 px-6 rounded-full transition transform hover:scale-105 shadow-lg flex items-center gap-2 justify-center"
              >
                <DollarSign className="w-5 h-5" />
                Open Real Demat Account
                <ArrowRight className="w-4 h-4" />
              </button>
              
              <button 
                onClick={() => {
                  setCurrentPage('simulator');
                  setSelectedStock(null);
                  setQuantity(1);
                }}
                className="bg-white/20 hover:bg-white/30 text-white font-semibold py-3 px-6 rounded-full transition border border-white/30"
              >
                Practice More
              </button>
            </div>
          </div>
        </div>
      </div>
    );
  };

  return (
    <div className="font-sans">
      {currentPage === 'onboarding' && <OnboardingPage />}
      {currentPage === 'simulator' && <SimulatorPage />}
      {currentPage === 'result' && <ResultPage />}
    </div>
  );
};

export default DematSimulator;