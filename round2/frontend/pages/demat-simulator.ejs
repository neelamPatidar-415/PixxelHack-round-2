<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Advanced Demat Trading Simulator</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <script>
        tailwind.config = {
            theme: {
                extend: {
                    colors: {
                        primary: '#27ae60',
                        secondary: '#2c3e50',
                        accent: '#667eea',
                        purple: '#764ba2'
                    },
                    animation: {
                        'float': 'float 20s linear infinite',
                        'slide-in-down': 'slideInDown 1s ease-out',
                        'fade-in-up': 'fadeInUp 1s ease-out',
                        'slide-in-up': 'slideInUp 0.6s ease forwards',
                        'flash-green': 'flashGreen 0.8s ease-in-out',
                        'flash-red': 'flashRed 0.8s ease-in-out',
                        'pulse-glow': 'pulseGlow 2s ease-in-out infinite',
                        'bounce-gentle': 'bounceGentle 2s ease-in-out infinite',
                        'slide-in': 'slideIn 0.3s ease-out',
                        'scale-in': 'scaleIn 0.3s ease-out',
                        'wiggle': 'wiggle 1s ease-in-out'
                    }
                }
            }
        }
    </script>
    <style>
        @keyframes float {
            0% { transform: translate(0, 0) rotate(0deg); }
            100% { transform: translate(-50px, -50px) rotate(360deg); }
        }
        
        @keyframes slideInDown {
            from { opacity: 0; transform: translateY(-100px); }
            to { opacity: 1; transform: translateY(0); }
        }
        
        @keyframes fadeInUp {
            from { opacity: 0; transform: translateY(30px); }
            to { opacity: 1; transform: translateY(0); }
        }
        
        @keyframes slideInUp {
            to { opacity: 1; transform: translateY(0); }
        }
        
        @keyframes flashGreen {
            0% { background-color: rgba(16, 185, 129, 0.3); }
            100% { background-color: transparent; }
        }
        
        @keyframes flashRed {
            0% { background-color: rgba(220, 38, 38, 0.3); }
            100% { background-color: transparent; }
        }
        
        @keyframes pulseGlow {
            0%, 100% { box-shadow: 0 0 15px rgba(39, 174, 96, 0.3); }
            50% { box-shadow: 0 0 30px rgba(39, 174, 96, 0.6); }
        }
        
        @keyframes bounceGentle {
            0%, 100% { transform: translateY(0); }
            50% { transform: translateY(-10px); }
        }

        @keyframes slideIn {
            from { transform: translateX(100%); opacity: 0; }
            to { transform: translateX(0); opacity: 1; }
        }

        @keyframes scaleIn {
            from { transform: scale(0.8); opacity: 0; }
            to { transform: scale(1); opacity: 1; }
        }

        @keyframes wiggle {
            0%, 7%, 14%, 21%, 28%, 35%, 42%, 49%, 56%, 63%, 70%, 77%, 84%, 91%, 98%, 100% { transform: rotate(0deg); }
            3.5%, 10.5%, 17.5%, 24.5%, 31.5%, 38.5%, 45.5%, 52.5%, 59.5%, 66.5%, 73.5%, 80.5%, 87.5%, 94.5% { transform: rotate(1deg); }
        }

        .hero-bg::before {
            content: '';
            position: absolute;
            top: -50%;
            left: -50%;
            width: 200%;
            height: 200%;
            background: radial-gradient(circle, rgba(255,255,255,0.1) 1px, transparent 1px);
            background-size: 50px 50px;
            animation: float 20s linear infinite;
            z-index: -1;
        }

        .feature-card-hover {
            position: relative;
            overflow: hidden;
        }

        .feature-card-hover::before {
            content: '';
            position: absolute;
            top: 0;
            left: -100%;
            width: 100%;
            height: 100%;
            background: linear-gradient(90deg, transparent, rgba(39, 174, 96, 0.1), transparent);
            transition: left 0.5s;
        }

        .feature-card-hover:hover::before {
            left: 100%;
        }

        .stagger-1 { animation-delay: 0.1s; }
        .stagger-2 { animation-delay: 0.2s; }
        .stagger-3 { animation-delay: 0.3s; }
        .stagger-4 { animation-delay: 0.4s; }

        .trading-chart {
            background: linear-gradient(45deg, #f0f9ff 25%, transparent 25%), 
                        linear-gradient(-45deg, #f0f9ff 25%, transparent 25%), 
                        linear-gradient(45deg, transparent 75%, #f0f9ff 75%), 
                        linear-gradient(-45deg, transparent 75%, #f0f9ff 75%);
            background-size: 20px 20px;
            background-position: 0 0, 0 10px, 10px -10px, -10px 0px;
        }
    </style>
    <link rel="stylesheet" href="/css/main.css">
  <link rel="stylesheet" href="/css/components.css">
</head>
<body class="bg-gradient-to-br from-accent to-purple min-h-screen text-gray-800">
  
  <!-- ENHANCED RESPONSIVE NAVIGATION BAR -->
<nav>
  <div class="nav-container">
    <!-- Logo -->
    <div class="logo">
      <img src="/images/WhatsApp Image 2025-08-09 at 16.46.01_0b7ada1a.jpg" alt="FinLit Logo">
      <div>FinLit</div>
    </div>

    <!-- Mobile Menu Toggle Button (will be created by JavaScript) -->
    <!-- Navigation Links -->
    <div class="nav-links">
      <a href="/">Home</a>
        <a href="/budget">Budget</a>
        <a href="/savings">Savings</a>
        <a href="/demat-simulator" class="active">Demat Simulator</a>
        <a href="/quiz">Quiz</a>
        <a href="/investments" >Investments</a>
        <a href="/welcome">Login</a>
    </div>
  </div>
</nav>

    <!-- Onboarding Page -->
    <div id="onboarding-page" class="page-content min-h-screen bg-gradient-to-br from-blue-900 via-purple-700 to-indigo-900 flex items-center justify-center p-8 text-white relative overflow-hidden hero-bg">
        <div class="max-w-5xl text-center z-10">
            <div class="text-7xl mb-8 animate-bounce-gentle">📈</div>
            <h1 class="text-4xl md:text-6xl font-bold mb-6 bg-gradient-to-r from-green-400 to-blue-500 bg-clip-text text-transparent animate-slide-in-down">
                Master Stock Trading with Zero Risk
            </h1>
            <p class="text-lg md:text-xl text-slate-300 mb-12 max-w-3xl mx-auto animate-fade-in-up leading-relaxed" style="animation-delay: 0.3s; animation-fill-mode: both;">
                Experience realistic trading with live market simulations. Build confidence, learn strategies, and understand market dynamics before investing real money.
            </p>
            
            <div class="grid md:grid-cols-3 gap-6 mb-12">
                <div class="bg-white bg-opacity-10 backdrop-blur-lg border border-white border-opacity-20 rounded-2xl p-6 text-center transition-all duration-300 hover:-translate-y-3 hover:scale-105 feature-card-hover opacity-0 animate-slide-in-up stagger-1">
                    <div class="text-4xl mb-3 transition-transform duration-300 hover:scale-125">📊</div>
                    <h3 class="text-lg font-semibold mb-2">Live Market Data</h3>
                    <p class="text-sm text-slate-300">Real NSE/BSE price movements</p>
                </div>
                <div class="bg-white bg-opacity-10 backdrop-blur-lg border border-white border-opacity-20 rounded-2xl p-6 text-center transition-all duration-300 hover:-translate-y-3 hover:scale-105 feature-card-hover opacity-0 animate-slide-in-up stagger-2">
                    <div class="text-4xl mb-3 transition-transform duration-300 hover:scale-125">🎯</div>
                    <h3 class="text-lg font-semibold mb-2">Smart Missions</h3>
                    <p class="text-sm text-slate-300">Progressive challenges & rewards</p>
                </div>
                <!-- <div class="bg-white bg-opacity-10 backdrop-blur-lg border border-white border-opacity-20 rounded-2xl p-6 text-center transition-all duration-300 hover:-translate-y-3 hover:scale-105 feature-card-hover opacity-0 animate-slide-in-up stagger-3">
                    <div class="text-4xl mb-3 transition-transform duration-300 hover:scale-125">🤖</div>
                    <h3 class="text-lg font-semibold mb-2">AI Trading Coach</h3>
                    <p class="text-sm text-slate-300">Personalized tips & strategies</p>
                </div> -->
                <div class="bg-white bg-opacity-10 backdrop-blur-lg border border-white border-opacity-20 rounded-2xl p-6 text-center transition-all duration-300 hover:-translate-y-3 hover:scale-105 feature-card-hover opacity-0 animate-slide-in-up stagger-4">
                    <div class="text-4xl mb-3 transition-transform duration-300 hover:scale-125">📈</div>
                    <h3 class="text-lg font-semibold mb-2">Risk-Free Learning</h3>
                    <p class="text-sm text-slate-300">Virtual money, real experience</p>
                </div>
            </div>

            <div class="flex flex-col sm:flex-row gap-4 justify-center items-center mb-8">
                <button onclick="TradingApp.showSimulator()" 
                        class="bg-gradient-to-r from-green-500 to-green-600 text-white font-bold text-xl px-12 py-4 rounded-full shadow-lg hover:scale-105 hover:shadow-xl transition-all duration-300 animate-pulse-glow opacity-100 animate-fade-in-up group" 
                        style="animation-delay: 0.6s; animation-fill-mode: both;">
                    <span class="flex items-center gap-2">
                        ▶ Start Trading Simulation
                        <span class="group-hover:translate-x-1 transition-transform duration-300">→</span>
                    </span>
                </button>
                <button onclick="TradingApp.showTutorial()" 
                        class="bg-white bg-opacity-20 text-white border border-white border-opacity-30 font-semibold px-8 py-4 rounded-full hover:bg-opacity-30 transition-all duration-300 opacity-0 animate-fade-in-up" 
                        style="animation-delay: 0.8s; animation-fill-mode: both;">
                    📚 Quick Tutorial
                </button>
            </div>
            
            <p class="text-sm text-slate-400 opacity-0 animate-fade-in-up" style="animation-delay: 1s; animation-fill-mode: both;">
                No signup required • Start with ₹1,00,000 virtual capital • Real market insights
            </p>
        </div>
    </div>

    <!-- Tutorial Modal -->
    <div id="tutorial-modal" class="fixed inset-0 bg-black bg-opacity-50 backdrop-blur-sm z-50 hidden flex items-center justify-center p-4">
        <div class="bg-white rounded-2xl max-w-2xl w-full max-h-[80vh] overflow-y-auto animate-scale-in">
            <div class="bg-gradient-to-r from-blue-500 to-purple-600 text-white p-6 rounded-t-2xl">
                <div class="flex justify-between items-center">
                    <h2 class="text-2xl font-bold">📚 Trading Tutorial</h2>
                    <button onclick="TradingApp.closeTutorial()" class="text-white hover:bg-white hover:bg-opacity-20 p-2 rounded-lg transition-colors">✕</button>
                </div>
            </div>
            <div class="p-6 space-y-6">
                <div class="space-y-4">
                    <div class="border-l-4 border-blue-500 pl-4">
                        <h3 class="font-semibold text-lg mb-2">🎯 How to Trade</h3>
                        <ol class="list-decimal list-inside space-y-2 text-sm text-gray-600">
                            <li>Select a stock from the left panel</li>
                            <li>Choose quantity (1-1000 shares)</li>
                            <li>Click BUY to purchase or SELL to exit positions</li>
                            <li>Monitor your portfolio and P&L in real-time</li>
                        </ol>
                    </div>
                    <div class="border-l-4 border-green-500 pl-4">
                        <h3 class="font-semibold text-lg mb-2">💡 Pro Tips</h3>
                        <ul class="list-disc list-inside space-y-2 text-sm text-gray-600">
                            <li>Diversify across different sectors</li>
                            <li>Watch for price patterns and trends</li>
                            <li>Don't invest all money in one stock</li>
                            <li>Learn from both profits and losses</li>
                        </ul>
                    </div>
                    <div class="border-l-4 border-purple-500 pl-4">
                        <h3 class="font-semibold text-lg mb-2">🏆 Mission System</h3>
                        <p class="text-sm text-gray-600">Complete trading challenges to earn badges and unlock advanced features. Each mission teaches important trading concepts.</p>
                    </div>
                </div>
                <button onclick="TradingApp.closeTutorial(); TradingApp.showSimulator();" 
                        class="w-full bg-gradient-to-r from-green-500 to-green-600 text-white font-bold py-3 rounded-lg hover:scale-105 transition-all duration-300">
                    🚀 Start Trading Now
                </button>
            </div>
        </div>
    </div>

    <!-- Simulator Page -->
    <div id="simulator-page" class="page-content hidden min-h-screen bg-gray-50">
        <!-- Enhanced Header -->
        <div class="bg-white border-b border-gray-200 shadow-lg">
            <div class="max-w-7xl mx-auto px-4 py-4">
                <div class="flex flex-col lg:flex-row justify-between items-center gap-4">
                    <div class="flex items-center gap-4">
                        <h1 class="text-2xl font-bold text-gray-900">Trading Dashboard</h1>
                        <div class="flex items-center gap-2 text-sm text-gray-500">
                            <span class="w-2 h-2 bg-green-500 rounded-full animate-pulse"></span>
                            Live Market
                        </div>
                    </div>
                    <div class="flex gap-3 flex-wrap justify-center">
                        <div class="bg-gradient-to-r from-green-100 to-green-200 text-green-800 px-4 py-2 rounded-xl font-semibold shadow-sm">
                            <span class="text-xs block">Cash Balance</span>
                            ₹<span id="balance-display">1,00,000</span>
                        </div>
                        <div class="bg-gradient-to-r from-blue-100 to-blue-200 text-blue-800 px-4 py-2 rounded-xl font-semibold shadow-sm">
                            <span class="text-xs block">Holdings</span>
                            <span id="portfolio-count">0</span> stocks
                        </div>
                        <div class="bg-gradient-to-r from-purple-100 to-purple-200 text-purple-800 px-4 py-2 rounded-xl font-semibold shadow-sm">
                            <span class="text-xs block">Portfolio Value</span>
                            ₹<span id="portfolio-value-display">0</span>
                        </div>
                        <div class="px-4 py-2 rounded-xl font-semibold shadow-sm" id="pnl-badge">
                            <span class="text-xs block">Total P&L</span>
                            <span id="pnl-display">₹0</span>
                        </div>
                        <button onclick="TradingApp.showResult()" 
                                class="bg-indigo-500  text-white px-4 py-2 rounded-xl hover:scale-105 transition-all duration-300 font-medium shadow-sm">
                            📊 View Results
                        </button>
                    </div>
                </div>
            </div>
        </div>

        <!-- Main Trading Interface -->
        <div class="max-w-7xl mx-auto p-4 grid grid-cols-1 xl:grid-cols-12 gap-6">
            <!-- Stock List Panel -->
            <div class="xl:col-span-3 bg-white rounded-2xl shadow-xl border border-gray-200 overflow-hidden">
                <div class="bg-blue-600 text-white p-4">
                  
                    <div class="flex flex-col gap-2 items-center justify-between">
                        <div class="flex items-center gap-2 font-semibold">
                            <span class="text-xl">📈</span>
                            Live Market
                        </div>
                        <select id="sector-filter" onchange="TradingApp.filterBySector(this.value)" 
                                class="bg-white bg-opacity-100 text-black text-xs px-2 py-1 rounded border-none outline-none">
                            <option value="">All Sectors</option>
                            <option value="IT">IT</option>
                            <option value="Banking">Banking</option>
                            <option value="FMCG">FMCG</option>
                            <option value="Energy">Energy</option>
                            <option value="Finance">Finance</option>
                        </select>
                    </div>
                </div>
                <div class="p-4">
                    <div id="stock-list" class="max-h-[500px] overflow-y-auto space-y-2 custom-scrollbar">
                        <!-- Stock items populated by JavaScript -->
                    </div>
                </div>
            </div>

            <!-- Trading Panel -->
            <div class="xl:col-span-6 bg-white rounded-2xl shadow-xl border border-gray-200 overflow-hidden">
                <div class="bg-gradient-to-r from-green-500 to-emerald-600 text-white p-4">
                    <div class="flex items-center justify-between">
                        <div class="flex items-center gap-2 font-semibold">
                            <span class="text-xl">💰</span>
                            Trading Terminal
                        </div>
                        <div class="text-sm opacity-90">
                            Trades: <span id="trade-count-display">0</span>
                        </div>
                    </div>
                </div>
                <div class="p-6">
                    <div id="trading-content">
                        <div class="text-center py-20 text-gray-500 trading-chart rounded-xl">
                            <div class="text-8xl mb-6 opacity-30 animate-bounce-gentle">📊</div>
                            <h3 class="text-xl font-semibold mb-2 text-gray-700">Ready to Trade?</h3>
                            <p class="text-gray-500">Select any stock from the market panel to begin your trading journey</p>
                            <div class="mt-6 flex justify-center gap-4 text-sm">
                                <span class="bg-green-100 text-green-700 px-3 py-1 rounded-full">📈 Buy Low</span>
                                <span class="bg-red-100 text-red-700 px-3 py-1 rounded-full">📉 Sell High</span>
                                <span class="bg-blue-100 text-blue-700 px-3 py-1 rounded-full">🎯 Diversify</span>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Enhanced Right Panel -->
            <div class="xl:col-span-3 space-y-6">
              
              <!-- Market Insights -->
              <div class="bg-white rounded-2xl shadow-xl border border-gray-200 overflow-hidden">
                  <div class="bg-gradient-to-r from-pink-500 to-rose-500 text-white p-4">
                      <div class="flex items-center gap-2 font-semibold">
                          <span class="text-xl">📊</span>
                          Market Insights
                      </div>
                  </div>
                  <div class="p-4">
                      <div id="market-insights" class="space-y-3 text-sm">
                          <div class="flex justify-between">
                              <span class="text-gray-600">Top Gainer:</span>
                              <span id="top-gainer" class="text-green-600 font-semibold">--</span>
                          </div>
                          <div class="flex justify-between">
                              <span class="text-gray-600">Top Loser:</span>
                              <span id="top-loser" class="text-red-600 font-semibold">--</span>
                          </div>
                          <div class="flex justify-between">
                              <span class="text-gray-600">Most Active:</span>
                              <span id="most-active" class="text-blue-600 font-semibold">--</span>
                          </div>
                          <div class="mt-3 p-3 bg-gray-50 rounded-lg">
                              <div class="text-xs text-gray-500 mb-1">Market Sentiment</div>
                              <div id="market-sentiment" class="flex items-center gap-2">
                                  <div class="w-full bg-gray-200 rounded-full h-2">
                                      <div id="sentiment-bar" class="bg-green-500 h-2 rounded-full transition-all duration-500" style="width: 50%"></div>
                                  </div>
                                  <span id="sentiment-text" class="text-xs font-medium">Neutral</span>
                              </div>
                          </div>
                      </div>
                  </div>
              </div>

                <!-- Enhanced Missions -->
                <div class="bg-white rounded-2xl shadow-xl border border-gray-200 overflow-hidden">
                    <div class="bg-gradient-to-r from-yellow-500 to-orange-500 text-white p-4">
                        <div class="flex items-center justify-between">
                            <div class="flex items-center gap-2 font-semibold">
                                <span class="text-xl">🏆</span>
                                Trading Missions
                            </div>
                            <div class="text-sm opacity-90">
                                <span id="completed-missions">0</span>/4 Complete
                            </div>
                        </div>
                    </div>
                    <div class="p-4">
                        <div id="missions-list" class="space-y-3">
                            <!-- Missions populated by JavaScript -->
                        </div>
                        <div class="mt-4 bg-yellow-50 border border-yellow-200 rounded-lg p-3">
                            <div class="text-xs text-yellow-700 font-medium">🎯 Mission Progress</div>
                            <div class="w-full bg-yellow-200 rounded-full h-2 mt-2">
                                <div id="mission-progress" class="bg-yellow-500 h-2 rounded-full transition-all duration-500" style="width: 0%"></div>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Enhanced Portfolio -->
                <div id="portfolio-panel" class="bg-white rounded-2xl shadow-xl border border-gray-200 overflow-hidden hidden">
                    <div class="bg-gradient-to-r from-teal-500 to-cyan-600 text-white p-4">
                        <div class="flex items-center justify-between">
                            <div class="flex items-center gap-2 font-semibold">
                                <span class="text-xl">📁</span>
                                Your Portfolio
                            </div>
                            <div class="text-sm opacity-90">
                                Total: ₹<span id="portfolio-total">0</span>
                            </div>
                        </div>
                    </div>
                    <div class="p-4">
                        <div id="portfolio-list" class="space-y-3">
                            <!-- Portfolio items populated by JavaScript -->
                        </div>
                        <div class="mt-4 pt-4 border-t border-gray-200">
                            <div class="flex justify-between text-sm">
                                <span class="text-gray-600">Portfolio Performance:</span>
                                <span id="portfolio-performance" class="font-semibold">0%</span>
                            </div>
                        </div>
                    </div>
                </div>

            </div>
        </div>
    </div>

    <!-- Enhanced Result Page -->
    <div id="result-page" class="page-content hidden min-h-screen bg-gradient-to-br from-emerald-800 via-teal-700 to-cyan-600 flex items-center justify-center p-8 text-white">
        <div class="max-w-5xl text-center">
            <div id="result-emoji" class="text-8xl mb-8 animate-bounce-gentle">🎉</div>
            <h1 id="result-title" class="text-4xl md:text-6xl font-bold mb-6 animate-slide-in-down">Trading Session Complete!</h1>
            
            <!-- Performance Dashboard -->
            <div class="grid md:grid-cols-4 gap-6 mb-8">
                <div class="bg-white bg-opacity-10 backdrop-blur-lg border border-white border-opacity-20 rounded-2xl p-6 hover:scale-105 transition-transform duration-300">
                    <div class="text-3xl font-bold mb-2">₹<span id="final-balance">1,00,000</span></div>
                    <div class="text-sm text-slate-300">Cash Balance</div>
                </div>
                <div class="bg-white bg-opacity-10 backdrop-blur-lg border border-white border-opacity-20 rounded-2xl p-6 hover:scale-105 transition-transform duration-300">
                    <div class="text-3xl font-bold mb-2">₹<span id="portfolio-value">0</span></div>
                    <div class="text-sm text-slate-300">Portfolio Value</div>
                </div>
                <div class="bg-white bg-opacity-10 backdrop-blur-lg border border-white border-opacity-20 rounded-2xl p-6 hover:scale-105 transition-transform duration-300">
                    <div id="total-pnl-display" class="text-3xl font-bold mb-2">₹0</div>
                    <div class="text-sm text-slate-300">Total Return</div>
                </div>
                <div class="bg-white bg-opacity-10 backdrop-blur-lg border border-white border-opacity-20 rounded-2xl p-6 hover:scale-105 transition-transform duration-300">
                    <div id="return-percentage" class="text-3xl font-bold mb-2">0%</div>
                    <div class="text-sm text-slate-300">Return %</div>
                </div>
            </div>

            <!-- Trading Performance Analysis -->
            <div class="grid md:grid-cols-2 gap-6 mb-8">
                <div class="bg-white bg-opacity-10 backdrop-blur-lg border border-white border-opacity-20 rounded-2xl p-6 text-left">
                    <h3 class="text-xl font-semibold mb-4 flex items-center gap-2">
                        📊 Trading Statistics
                    </h3>
                    <div class="space-y-3 text-sm">
                        <div class="flex justify-between">
                            <span>Total Trades:</span>
                            <span id="total-trades-result" class="font-semibold">0</span>
                        </div>
                        <div class="flex justify-between">
                            <span>Stocks Traded:</span>
                            <span id="unique-stocks-result" class="font-semibold">0</span>
                        </div>
                        <div class="flex justify-between">
                            <span>Session Duration:</span>
                            <span id="session-duration" class="font-semibold">0m</span>
                        </div>
                        <div class="flex justify-between">
                            <span>Best Performing Stock:</span>
                            <span id="best-stock" class="font-semibold text-green-400">--</span>
                        </div>
                        <div class="flex justify-between">
                            <span>Missions Completed:</span>
                            <span id="missions-completed-result" class="font-semibold">0/4</span>
                        </div>
                    </div>
                </div>

                <div class="bg-white bg-opacity-10 backdrop-blur-lg border border-white border-opacity-20 rounded-2xl p-6 text-left">
                    <h3 class="text-xl font-semibold mb-4 flex items-center gap-2">
                        📚 Key Learning Points
                    </h3>
                    <ul id="learning-points-list" class="space-y-3 text-sm">
                        <!-- Learning points populated by JavaScript -->
                    </ul>
                </div>
            </div>

            <!-- Performance Grade -->
            <div class="bg-white bg-opacity-10 backdrop-blur-lg border border-white border-opacity-20 rounded-2xl p-8 mb-8">
                <h3 class="text-2xl font-semibold mb-4 text-center">Your Trading Grade</h3>
                <div class="flex items-center justify-center">
                    <div id="trading-grade" class="w-24 h-24 rounded-full bg-gradient-to-r from-yellow-400 to-orange-500 flex items-center justify-center text-4xl font-bold text-white shadow-lg">
                        A+
                    </div>
                </div>
                <p id="grade-description" class="text-center mt-4 text-slate-200">
                    Excellent trading performance! You demonstrated strong decision-making skills.
                </p>
            </div>

            <p class="text-xl text-slate-200 mb-8">
                Ready to start your real trading journey?
            </p>
            
            <div class="flex flex-col md:flex-row gap-4 justify-center">
                <button onclick="window.open('https://zerodha.com/open-account?c=ZXARJD', '_blank')" 
                        class="bg-gradient-to-r from-green-500 to-green-600 text-white font-bold text-lg px-10 py-4 rounded-full shadow-lg hover:scale-105 hover:shadow-xl transition-all duration-300 animate-pulse-glow">
                    💰 Open Real Demat Account →
                </button>
                
                <button onclick="TradingApp.resetSimulator()" 
                        class="bg-white bg-opacity-20 text-white border border-white border-opacity-30 font-semibold px-8 py-4 rounded-full hover:bg-opacity-30 transition-all duration-300">
                    🔄 Try Again
                </button>

                <button onclick="TradingApp.shareResults()" 
                        class="bg-gradient-to-r from-purple-500 to-pink-500 text-white font-semibold px-8 py-4 rounded-full hover:scale-105 transition-all duration-300">
                    📱 Share Results
                </button>
            </div>
        </div>
    </div>

    <!-- Notification System -->
    <div id="notification-container" class="fixed top-20 right-4 z-50 space-y-2">
        <!-- Notifications will be dynamically created here -->
    </div>

    <!-- Loading Overlay -->
    <div id="loading-overlay" class="fixed inset-0 bg-black bg-opacity-50 backdrop-blur-sm z-50 hidden flex items-center justify-center">
        <div class="bg-white rounded-2xl p-8 text-center">
            <div class="text-4xl mb-4 animate-spin">⚡</div>
            <p class="text-gray-700 font-medium">Loading market data...</p>
        </div>
    </div>

    <script>
        // ========== ENHANCED TRADING SIMULATOR CLASS ==========
        class AdvancedTradingSimulator {
            constructor() {
                this.state = {
                    currentPage: 'onboarding',
                    selectedStock: null,
                    quantity: 1,
                    portfolio: [],
                    balance: 100000,
                    initialBalance: 100000,
                    tradeHistory: [],
                    missions: [
                        { 
                            id: 1, 
                            title: "Execute your first trade", 
                            completed: false, 
                            reward: "₹500 bonus", 
                            description: "Buy or sell any stock to get started",
                            type: "first_trade"
                        },
                        { 
                            id: 2, 
                            title: "Build a diversified portfolio", 
                            completed: false, 
                            reward: "Diversification Master", 
                            description: "Own stocks from 3 different sectors",
                            type: "diversification"
                        },
                        { 
                            id: 3, 
                            title: "Become an active trader", 
                            completed: false, 
                            reward: "Trading Pro Badge", 
                            description: "Execute 8 successful trades",
                            type: "trade_volume"
                        },
                        { 
                            id: 4, 
                            title: "Achieve profitable returns", 
                            completed: false, 
                            reward: "Profit Champion", 
                            description: "End with positive overall returns",
                            type: "profitability"
                        }
                    ],
                    startTime: Date.now(),
                    sessionDuration: 0,
                    marketSentiment: 'neutral',
                    filteredSector: '',
                    mobileMenuOpen: false
                };

                this.stockDatabase = [
                    { symbol: 'RELIANCE', name: 'Reliance Industries Ltd', price: 2456.75, basePrice: 2456.75, change: 0, changePercent: 0, sector: 'Energy', marketCap: 'Large', volatility: 0.012 },
                    { symbol: 'TCS', name: 'Tata Consultancy Services', price: 3892.50, basePrice: 3892.50, change: 0, changePercent: 0, sector: 'IT', marketCap: 'Large', volatility: 0.015 },
                    { symbol: 'HDFCBANK', name: 'HDFC Bank Ltd', price: 1678.90, basePrice: 1678.90, change: 0, changePercent: 0, sector: 'Banking', marketCap: 'Large', volatility: 0.010 },
                    { symbol: 'INFY', name: 'Infosys Ltd', price: 1834.25, basePrice: 1834.25, change: 0, changePercent: 0, sector: 'IT', marketCap: 'Large', volatility: 0.014 },
                    { symbol: 'ICICIBANK', name: 'ICICI Bank Ltd', price: 1245.60, basePrice: 1245.60, change: 0, changePercent: 0, sector: 'Banking', marketCap: 'Large', volatility: 0.013 },
                    { symbol: 'HINDUNILVR', name: 'Hindustan Unilever Ltd', price: 2567.30, basePrice: 2567.30, change: 0, changePercent: 0, sector: 'FMCG', marketCap: 'Large', volatility: 0.008 },
                    { symbol: 'ITC', name: 'ITC Ltd', price: 456.80, basePrice: 456.80, change: 0, changePercent: 0, sector: 'FMCG', marketCap: 'Large', volatility: 0.011 },
                    { symbol: 'BAJFINANCE', name: 'Bajaj Finance Ltd', price: 7234.50, basePrice: 7234.50, change: 0, changePercent: 0, sector: 'Finance', marketCap: 'Large', volatility: 0.018 },
                    { symbol: 'LT', name: 'Larsen & Toubro Ltd', price: 3245.60, basePrice: 3245.60, change: 0, changePercent: 0, sector: 'Infrastructure', marketCap: 'Large', volatility: 0.016 },
                    { symbol: 'ASIANPAINT', name: 'Asian Paints Ltd', price: 2987.40, basePrice: 2987.40, change: 0, changePercent: 0, sector: 'Paints', marketCap: 'Large', volatility: 0.013 },
                    { symbol: 'MARUTI', name: 'Maruti Suzuki India Ltd', price: 12456.30, basePrice: 12456.30, change: 0, changePercent: 0, sector: 'Auto', marketCap: 'Large', volatility: 0.017 },
                    { symbol: 'WIPRO', name: 'Wipro Ltd', price: 567.85, basePrice: 567.85, change: 0, changePercent: 0, sector: 'IT', marketCap: 'Large', volatility: 0.016 }
                ];

                this.coachDatabase = {
                    welcome: [
                        "💡 Welcome! Start by analyzing different sectors and their current trends.",
                        "🎯 Focus on understanding market movements before making trades.",
                        "📊 Study the stocks and identify potential opportunities."
                    ],
                    contextual: {
                        buy: [
                            "📈 Good choice! Consider the stock's recent performance trends.",
                            "💡 You're buying at ₹{price}. Monitor how prices fluctuate in real-time.",
                            "🎯 Remember: Buy low, sell high is the fundamental principle.",
                            "⚡ This sector shows {sentiment} sentiment currently.",
                            "🔍 Research the company's fundamentals for better decisions."
                        ],
                        sell: [
                            "📉 Smart move! Always evaluate your profit/loss before selling.",
                            "💰 Booking profits is wise, but don't forget about taxes in real trading.",
                            "⏰ Timing the market is challenging - this is excellent practice!",
                            "📊 Check if this aligns with your overall portfolio strategy.",
                            "🎓 Every sell decision teaches valuable lessons about market timing."
                        ]
                    },
                    risk: [
                        "⚠️ High-risk stocks can offer high returns but also high losses.",
                        "🛡️ Never invest more than you can afford to lose.",
                        "📉 Diversification reduces risk - don't put all eggs in one basket.",
                        "⚖️ Balance high-risk and low-risk investments for stability.",
                        "🎯 Set stop-loss levels to protect your capital."
                    ],
                    market: [
                        "📈 The market is showing bullish trends in certain sectors.",
                        "📊 IT sector stocks are performing well due to global demand.",
                        "🏦 Banking stocks often reflect the overall economic health.",
                        "🏭 Infrastructure and energy sectors can be cyclical.",
                        "🛒 FMCG stocks are generally considered defensive investments."
                    ]
                };

                this.intervals = {};
                this.notifications = [];
                this.priceHistory = new Map();
                
                this.init();
            }

            init() {
                this.bindEvents();
                this.initializePriceHistory();
                this.showPage('onboarding-page');
                console.log('🚀 Advanced Trading Simulator Initialized');
            }

            bindEvents() {
                // Keyboard shortcuts
                document.addEventListener('keydown', (e) => {
                    if (e.key === 'Escape') {
                        if (this.state.currentPage === 'simulator-page') {
                            this.showResult();
                        } else if (document.getElementById('tutorial-modal').classList.contains('hidden') === false) {
                            this.closeTutorial();
                        }
                    }
                    if (e.key === 'r' && e.ctrlKey && this.state.currentPage === 'result-page') {
                        e.preventDefault();
                        this.resetSimulator();
                    }
                });

                // Auto-save state periodically
                this.intervals.autoSave = setInterval(() => {
                    this.updateSessionDuration();
                }, 30000);
            }

            initializePriceHistory() {
                this.stockDatabase.forEach(stock => {
                    this.priceHistory.set(stock.symbol, [stock.price]);
                });
            }

            // ========== ENHANCED PAGE MANAGEMENT ==========
            showPage(pageId) {
                document.querySelectorAll('.page-content').forEach(page => {
                    page.classList.add('hidden');
                });
                const targetPage = document.getElementById(pageId);
                if (targetPage) {
                    targetPage.classList.remove('hidden');
                    this.state.currentPage = pageId;
                }
            }

            showSimulator() {
                this.showLoadingOverlay();
                setTimeout(() => {
                    this.hideLoadingOverlay();
                    this.showPage('simulator-page');
                    this.initializeSimulator();
                }, 1000);
            }

            showTutorial() {
                document.getElementById('tutorial-modal').classList.remove('hidden');
            }

            closeTutorial() {
                document.getElementById('tutorial-modal').classList.add('hidden');
            }

            showResult() {
                this.clearIntervals();
                this.updateSessionDuration();
                this.showPage('result-page');
                this.updateResultPage();
            }

            showLeaderboard() {
                this.showNotification('🏆 Leaderboard feature coming soon!', 'info', 3000);
            }

            toggleMobileMenu() {
                const menu = document.getElementById('mobile-menu');
                this.state.mobileMenuOpen = !this.state.mobileMenuOpen;
                if (this.state.mobileMenuOpen) {
                    menu.classList.remove('hidden');
                } else {
                    menu.classList.add('hidden');
                }
            }

            resetSimulator() {
                this.clearIntervals();
                this.clearNotifications();
                
                // Reset state with enhanced tracking
                this.state = {
                    ...this.state,
                    selectedStock: null,
                    quantity: 1,
                    portfolio: [],
                    balance: 100000,
                    tradeHistory: [],
                    startTime: Date.now(),
                    sessionDuration: 0,
                    filteredSector: '',
                    missions: this.state.missions.map(m => ({ ...m, completed: false }))
                };
                
                this.resetStockPrices();
                this.initializePriceHistory();
                this.showSimulator();
            }

            // ========== ENHANCED INITIALIZATION ==========
            initializeSimulator() {
                this.renderStockList();
                this.renderMissions();
                this.updateAllDisplays();
                this.updateMarketInsights();
                
                // Enhanced price updates with realistic patterns
                this.intervals.priceUpdate = setInterval(() => this.updateStockPrices(), 2000);
                this.intervals.tipRotation = setInterval(() => this.rotateCoachTip(), 12000);
                this.intervals.marketUpdate = setInterval(() => this.updateMarketInsights(), 5000);
                
                this.showNotification('🚀 Trading session started! Good luck!', 'info', 2000);
            }

            clearIntervals() {
                Object.values(this.intervals).forEach(interval => clearInterval(interval));
                this.intervals = {};
            }

            // ========== ADVANCED STOCK PRICE SIMULATION ==========
            updateStockPrices() {
                let bullishCount = 0;
                
                this.stockDatabase = this.stockDatabase.map(stock => {
                    // Realistic price movement based on volatility and market trends
                    const marketTrend = this.getMarketTrend();
                    const sectorTrend = this.getSectorTrend(stock.sector);
                    const randomFactor = (Math.random() - 0.5) * stock.volatility;
                    
                    const combinedFactor = (marketTrend * 0.4) + (sectorTrend * 0.3) + (randomFactor * 0.3);
                    const newPrice = Math.max(stock.price * (1 + combinedFactor), stock.basePrice * 0.5);
                    
                    const priceChange = newPrice - stock.price;
                    const changePercent = (priceChange / stock.price) * 100;
                    
                    // Update price history
                    const history = this.priceHistory.get(stock.symbol) || [];
                    history.push(newPrice);
                    if (history.length > 50) history.shift(); // Keep last 50 prices
                    this.priceHistory.set(stock.symbol, history);
                    
                    if (changePercent > 0) bullishCount++;
                    
                    return {
                        ...stock,
                        price: newPrice,
                        change: priceChange,
                        changePercent: changePercent,
                        trend: this.calculateTrend(history)
                    };
                });

                // Update market sentiment
                this.state.marketSentiment = bullishCount > this.stockDatabase.length / 2 ? 'bullish' : 
                                           bullishCount < this.stockDatabase.length / 3 ? 'bearish' : 'neutral';

                this.renderStockList();
                this.updateSelectedStock();
                this.updatePortfolioDisplay();
                this.updateAllDisplays();
            }

            getMarketTrend() {
                const time = Date.now();
                const cycleFactor = Math.sin(time / 60000) * 0.001; // 1-minute cycle
                const randomShock = Math.random() < 0.05 ? (Math.random() - 0.5) * 0.01 : 0; // 5% chance of market shock
                return cycleFactor + randomShock;
            }

            getSectorTrend(sector) {
                const sectorMultipliers = {
                    'IT': 0.002,
                    'Banking': -0.001,
                    'FMCG': 0.001,
                    'Energy': -0.0005,
                    'Finance': 0.0015,
                    'Infrastructure': 0.001,
                    'Paints': 0.0008,
                    'Auto': -0.0012
                };
                return (sectorMultipliers[sector] || 0) + (Math.random() - 0.5) * 0.002;
            }

            calculateTrend(priceHistory) {
                if (priceHistory.length < 5) return 'neutral';
                
                const recent = priceHistory.slice(-5);
                const older = priceHistory.slice(-10, -5);
                
                const recentAvg = recent.reduce((a, b) => a + b, 0) / recent.length;
                const olderAvg = older.reduce((a, b) => a + b, 0) / older.length;
                
                const trendStrength = (recentAvg - olderAvg) / olderAvg;
                
                if (trendStrength > 0.005) return 'strong_up';
                if (trendStrength > 0.002) return 'up';
                if (trendStrength < -0.005) return 'strong_down';
                if (trendStrength < -0.002) return 'down';
                return 'neutral';
            }

            updateSelectedStock() {
                if (this.state.selectedStock) {
                    const updatedStock = this.stockDatabase.find(s => s.symbol === this.state.selectedStock.symbol);
                    if (updatedStock) {
                        this.state.selectedStock = updatedStock;
                        this.renderTradingPanel();
                    }
                }
            }

            resetStockPrices() {
                this.stockDatabase = this.stockDatabase.map(stock => ({
                    ...stock,
                    price: stock.basePrice,
                    change: 0,
                    changePercent: 0,
                    trend: 'neutral'
                }));
                this.initializePriceHistory();
            }

            // ========== ADVANCED RENDERING SYSTEM ==========
            renderStockList() {
                const stockList = document.getElementById('stock-list');
                if (!stockList) return;
                
                const filteredStocks = this.state.filteredSector 
                    ? this.stockDatabase.filter(s => s.sector === this.state.filteredSector)
                    : this.stockDatabase;
                
                stockList.innerHTML = '';

                filteredStocks.forEach((stock, index) => {
                    const isSelected = this.state.selectedStock?.symbol === stock.symbol;
                    const holding = this.state.portfolio.find(p => p.symbol === stock.symbol);
                    
                    const stockItem = document.createElement('div');
                    stockItem.className = `p-4 rounded-xl cursor-pointer transition-all duration-300 border-2 hover:shadow-lg ${
                        isSelected 
                            ? 'bg-blue-50 border-blue-300 shadow-md ring-2 ring-blue-200' 
                            : 'bg-gray-50 border-transparent hover:bg-gray-100 hover:border-gray-200'
                    }`;
                    
                    stockItem.onclick = () => this.selectStock(stock);
                    
                    const trendIcon = this.getTrendIcon(stock.trend);
                    const trendColor = this.getTrendColor(stock.trend);
                    
                    stockItem.innerHTML = `
                        <div class="flex justify-between items-start">
                            <div class="flex-1 min-w-0">
                                <div class="flex items-center gap-2 mb-1">
                                    <span class="font-bold text-sm text-gray-900">${stock.symbol}</span>
                                    <span class="text-xs ${trendColor}">${trendIcon}</span>
                                    ${holding ? '<span class="w-2 h-2 bg-green-500 rounded-full" title="You own this stock"></span>' : ''}
                                </div>
                                <div class="text-xs text-gray-600 truncate mb-1">${stock.name}</div>
                                <div class="flex items-center gap-2">
                                    <span class="text-xs bg-gray-200 text-gray-700 px-2 py-0.5 rounded-full">${stock.sector}</span>
                                    ${holding ? `<span class="text-xs text-green-600 font-medium">${holding.quantity} owned</span>` : ''}
                                </div>
                            </div>
                            <div class="text-right flex-shrink-0">
                                <div class="font-bold text-sm text-gray-900">₹${stock.price.toFixed(2)}</div>
                                <div class="text-xs font-medium ${stock.changePercent >= 0 ? 'text-green-600' : 'text-red-600'}">
                                    ${stock.changePercent >= 0 ? '+' : ''}${stock.changePercent.toFixed(2)}%
                                </div>
                                <div class="text-xs text-gray-500 mt-1">${stock.marketCap} Cap</div>
                            </div>
                        </div>
                    `;
                    
                    // Add flash effect for significant price changes
                    if (Math.abs(stock.changePercent) > 0.5) {
                        stockItem.classList.add(stock.changePercent > 0 ? 'animate-flash-green' : 'animate-flash-red');
                        setTimeout(() => {
                            stockItem.classList.remove('animate-flash-green', 'animate-flash-red');
                        }, 800);
                    }
                    
                    stockList.appendChild(stockItem);
                });
            }

            getTrendIcon(trend) {
                const icons = {
                    'strong_up': '🚀',
                    'up': '📈',
                    'neutral': '➡️',
                    'down': '📉',
                    'strong_down': '⬇️'
                };
                return icons[trend] || '➡️';
            }

            getTrendColor(trend) {
                const colors = {
                    'strong_up': 'text-green-600',
                    'up': 'text-green-500',
                    'neutral': 'text-gray-500',
                    'down': 'text-red-500',
                    'strong_down': 'text-red-600'
                };
                return colors[trend] || 'text-gray-500';
            }

            selectStock(stock) {
                this.state.selectedStock = stock;
                this.renderStockList();
                this.renderTradingPanel();
                
                // Provide contextual coach advice
                this.updateCoachTip('stock_selected', stock);
            }

            renderTradingPanel() {
                const tradingContent = document.getElementById('trading-content');
                if (!tradingContent) return;
                
                if (!this.state.selectedStock) {
                    tradingContent.innerHTML = this.getEmptyTradingState();
                    return;
                }

                const stock = this.state.selectedStock;
                const totalAmount = stock.price * this.state.quantity;
                const holding = this.state.portfolio.find(p => p.symbol === stock.symbol);
                const canBuy = this.state.balance >= totalAmount;
                const canSell = holding && holding.quantity >= this.state.quantity;

                tradingContent.innerHTML = `
                    <div class="bg-gradient-to-r from-slate-50 to-blue-50 rounded-2xl p-6 mb-6 border-2 border-blue-200 shadow-sm">
                        <div class="flex justify-between items-start mb-4">
                            <div>
                                <div class="flex items-center gap-3 mb-2">
                                    <h3 class="text-2xl font-bold text-gray-900">${stock.symbol}</h3>
                                    <span class="text-lg ${this.getTrendColor(stock.trend)}">${this.getTrendIcon(stock.trend)}</span>
                                </div>
                                <p class="text-gray-600 text-sm font-medium">${stock.name}</p>
                                <div class="flex items-center gap-3 mt-2">
                                    <span class="text-xs bg-${this.getSectorColor(stock.sector)}-100 text-${this.getSectorColor(stock.sector)}-700 px-2 py-1 rounded-full font-medium">${stock.sector}</span>
                                    <span class="text-xs text-gray-500">${stock.marketCap} Cap</span>
                                </div>
                            </div>
                            <div class="text-right">
                                <div class="text-3xl font-bold text-gray-900">₹${stock.price.toFixed(2)}</div>
                                <div class="text-sm font-medium ${stock.changePercent >= 0 ? 'text-green-600' : 'text-red-600'}">
                                    ${stock.changePercent >= 0 ? '+' : ''}${stock.change.toFixed(2)} (${stock.changePercent.toFixed(2)}%)
                                </div>
                                <div class="text-xs text-gray-500 mt-1">Volatility: ${(stock.volatility * 100).toFixed(1)}%</div>
                            </div>
                        </div>
                        
                        ${holding ? `
                            <div class="bg-yellow-50 border border-yellow-200 rounded-lg p-3 mt-3">
                                <div class="text-sm font-medium text-yellow-800">Your Position</div>
                                <div class="text-xs text-yellow-700 mt-1">
                                    ${holding.quantity} shares owned @ ₹${holding.avgPrice.toFixed(2)} avg price
                                    <span class="ml-2 ${this.getPositionPnL(holding, stock) >= 0 ? 'text-green-600' : 'text-red-600'} font-medium">
                                        (${this.getPositionPnL(holding, stock) >= 0 ? '+' : ''}${this.getPositionPnL(holding, stock).toFixed(2)}%)
                                    </span>
                                </div>
                            </div>
                        ` : ''}
                    </div>

                    <div class="space-y-6">
                        <!-- Quantity Selector with Presets -->
                        <div>
                            <label class="block text-sm font-semibold text-gray-700 mb-3">Select Quantity</label>
                            <div class="flex gap-2 mb-3">
                                ${[1, 5, 10, 25, 50].map(qty => `
                                    <button onclick="TradingApp.setQuantity(${qty})" 
                                            class="px-3 py-1 text-xs rounded-full border transition-all duration-200 ${
                                                this.state.quantity === qty 
                                                    ? 'bg-blue-500 text-white border-blue-500' 
                                                    : 'bg-gray-100 text-gray-700 border-gray-300 hover:bg-gray-200'
                                            }">
                                        ${qty}
                                    </button>
                                `).join('')}
                            </div>
                            <input 
                                type="number" 
                                id="quantity-input"
                                value="${this.state.quantity}"
                                min="1"
                                max="1000"
                                class="w-full px-4 py-3 border-2 border-gray-300 rounded-xl focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all duration-200 text-lg font-medium"
                                oninput="TradingApp.updateQuantity(this.value)"
                                placeholder="Enter quantity..."
                            />
                        </div>

                        <!-- Order Summary -->
                        <div class="bg-gradient-to-r from-blue-50 to-indigo-50 border-2 border-blue-200 rounded-xl p-5">
                            <h4 class="font-semibold text-gray-700 mb-3 flex items-center gap-2">
                                📋 Order Summary
                            </h4>
                            <div class="space-y-2 text-sm">
                                <div class="flex justify-between">
                                    <span class="text-gray-600">Stock:</span>
                                    <span class="font-semibold">${stock.symbol}</span>
                                </div>
                                <div class="flex justify-between">
                                    <span class="text-gray-600">Price per share:</span>
                                    <span class="font-semibold">₹${stock.price.toFixed(2)}</span>
                                </div>
                                <div class="flex justify-between">
                                    <span class="text-gray-600">Quantity:</span>
                                    <span class="font-semibold">${this.state.quantity} shares</span>
                                </div>
                                <div class="flex justify-between">
                                    <span class="text-gray-600">Brokerage (0.1%):</span>
                                    <span class="font-semibold">₹${(totalAmount * 0.001).toFixed(2)}</span>
                                </div>
                                <hr class="border-blue-300">
                                <div class="flex justify-between text-base">
                                    <span class="font-semibold text-gray-700">Total Amount:</span>
                                    <span class="font-bold text-xl text-blue-600">₹${(totalAmount + totalAmount * 0.001).toFixed(2)}</span>
                                </div>
                            </div>
                        </div>

                        <!-- Trading Buttons -->
                        <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                            <button onclick="TradingApp.executeTrade('buy')" 
                                    class="relative overflow-hidden bg-gradient-to-r from-green-500 to-green-600 text-white font-bold py-4 px-6 rounded-xl transition-all duration-300 flex items-center justify-center gap-3 group ${!canBuy ? 'opacity-50 cursor-not-allowed' : 'hover:scale-105 hover:shadow-xl'}">
                                <span class="text-xl">📈</span>
                                <span>BUY ${this.state.quantity > 1 ? `(${this.state.quantity})` : ''}</span>
                                ${canBuy ? '<span class="group-hover:translate-x-1 transition-transform duration-300">→</span>' : ''}
                            </button>
                            <button onclick="TradingApp.executeTrade('sell')" 
                                    class="relative overflow-hidden bg-gradient-to-r from-red-500 to-red-600 text-white font-bold py-4 px-6 rounded-xl transition-all duration-300 flex items-center justify-center gap-3 group ${!canSell ? 'opacity-50 cursor-not-allowed' : 'hover:scale-105 hover:shadow-xl'}">
                                <span class="text-xl">📉</span>
                                <span>SELL ${this.state.quantity > 1 ? `(${this.state.quantity})` : ''}</span>
                                ${canSell ? '<span class="group-hover:translate-x-1 transition-transform duration-300">→</span>' : ''}
                            </button>
                        </div>

                        <!-- Order Warnings -->
                        <div class="space-y-2">
                            ${!canBuy ? `
                                <div class="bg-red-50 border border-red-200 rounded-lg p-3 text-red-700 text-sm flex items-center gap-2">
                                    <span>⚠️</span>
                                    <span>Insufficient balance! Need ₹${((totalAmount + totalAmount * 0.001) - this.state.balance).toLocaleString('en-IN')} more.</span>
                                </div>
                            ` : ''}
                            
                            ${!canSell && holding ? `
                                <div class="bg-yellow-50 border border-yellow-200 rounded-lg p-3 text-yellow-700 text-sm flex items-center gap-2">
                                    <span>⚠️</span>
                                    <span>You can only sell ${holding.quantity} shares of ${stock.symbol}.</span>
                                </div>
                            ` : ''}
                            
                            ${!holding && this.state.quantity > 0 ? `
                                <div class="bg-blue-50 border border-blue-200 rounded-lg p-3 text-blue-700 text-sm flex items-center gap-2">
                                    <span>💡</span>
                                    <span>You don't own any ${stock.symbol} shares yet. Start with a BUY order.</span>
                                </div>
                            ` : ''}
                        </div>

                        <!-- Quick Actions -->
                        <div class="flex gap-2 text-xs">
                            <button onclick="TradingApp.setQuantity(Math.floor(TradingApp.state.balance / TradingApp.state.selectedStock.price))" 
                                    class="bg-gray-100 text-gray-700 px-3 py-1 rounded-full hover:bg-gray-200 transition-colors">
                                Max Buy (${Math.floor(this.state.balance / stock.price)})
                            </button>
                            ${holding ? `
                                <button onclick="TradingApp.setQuantity(${holding.quantity})" 
                                        class="bg-gray-100 text-gray-700 px-3 py-1 rounded-full hover:bg-gray-200 transition-colors">
                                    Sell All (${holding.quantity})
                                </button>
                            ` : ''}
                        </div>
                    </div>
                `;
            }

            getEmptyTradingState() {
                return `
                    <div class="text-center py-20 text-gray-500 trading-chart rounded-xl">
                        <div class="text-8xl mb-6 opacity-30 animate-bounce-gentle">📊</div>
                        <h3 class="text-xl font-semibold mb-3 text-gray-700">Ready to Start Trading?</h3>
                        <p class="text-gray-500 mb-6">Select any stock from the market panel to begin your trading journey</p>
                        <div class="flex justify-center gap-4 text-sm flex-wrap">
                            <span class="bg-green-100 text-green-700 px-4 py-2 rounded-full font-medium">📈 Buy Low</span>
                            <span class="bg-red-100 text-red-700 px-4 py-2 rounded-full font-medium">📉 Sell High</span>
                            <span class="bg-blue-100 text-blue-700 px-4 py-2 rounded-full font-medium">🎯 Diversify</span>
                        </div>
                        <button onclick="TradingApp.selectRandomStock()" 
                                class="mt-6 bg-blue-500 text-white px-6 py-3 rounded-xl hover:bg-blue-600 transition-colors font-medium">
                            🎲 Pick Random Stock
                        </button>
                    </div>
                `;
            }

            selectRandomStock() {
                const randomStock = this.stockDatabase[Math.floor(Math.random() * this.stockDatabase.length)];
                this.selectStock(randomStock);
                this.showNotification(`🎲 Selected ${randomStock.symbol} randomly!`, 'info', 2000);
            }

            setQuantity(qty) {
                this.state.quantity = Math.max(1, Math.min(1000, qty));
                document.getElementById('quantity-input').value = this.state.quantity;
                this.renderTradingPanel();
            }

            updateQuantity(value) {
                this.state.quantity = Math.max(1, Math.min(1000, parseInt(value) || 1));
                this.renderTradingPanel();
            }

            getSectorColor(sector) {
                const colors = {
                    'IT': 'blue',
                    'Banking': 'green',
                    'FMCG': 'purple',
                    'Energy': 'yellow',
                    'Finance': 'indigo',
                    'Infrastructure': 'gray',
                    'Paints': 'pink',
                    'Auto': 'red'
                };
                return colors[sector] || 'gray';
            }

            getPositionPnL(holding, currentStock) {
                const currentValue = currentStock.price * holding.quantity;
                const investedValue = holding.avgPrice * holding.quantity;
                return ((currentValue - investedValue) / investedValue) * 100;
            }

            filterBySector(sector) {
                this.state.filteredSector = sector;
                this.renderStockList();
                
                if (sector) {
                    this.showNotification(`🔍 Filtered to ${sector} sector stocks`, 'info', 2000);
                } else {
                    this.showNotification('📊 Showing all stocks', 'info', 2000);
                }
            }

            // ========== ENHANCED TRADING LOGIC ==========
            executeTrade(action) {
                if (!this.state.selectedStock || this.state.quantity <= 0) return;

                const stock = this.state.selectedStock;
                const quantity = this.state.quantity;
                const brokerage = stock.price * quantity * 0.001; // 0.1% brokerage
                const totalAmount = (stock.price * quantity) + brokerage;
                
                if (action === 'buy') {
                    if (totalAmount > this.state.balance) {
                        this.showNotification(`❌ Insufficient funds! Need ₹${(totalAmount - this.state.balance).toFixed(2)} more`, 'error');
                        return;
                    }

                    this.executeBuyOrder(stock, quantity, totalAmount, brokerage);
                    
                } else if (action === 'sell') {
                    const holding = this.state.portfolio.find(p => p.symbol === stock.symbol);
                    if (!holding || holding.quantity < quantity) {
                        this.showNotification(`❌ Insufficient shares! You have ${holding ? holding.quantity : 0} shares`, 'error');
                        return;
                    }

                    this.executeSellOrder(stock, quantity, totalAmount, brokerage, holding);
                }

                this.updateCoachTip(action, stock);
                this.checkAndUpdateMissions();
                this.updateAllDisplays();
                this.renderMissions();
                this.renderTradingPanel();

                // Auto-progression logic
                this.checkAutoProgression();
            }

            executeBuyOrder(stock, quantity, totalAmount, brokerage) {
                this.state.balance -= totalAmount;
                
                const existing = this.state.portfolio.find(p => p.symbol === stock.symbol);
                if (existing) {
                    const totalQuantity = existing.quantity + quantity;
                    const totalInvestment = (existing.avgPrice * existing.quantity) + (stock.price * quantity);
                    existing.quantity = totalQuantity;
                    existing.avgPrice = totalInvestment / totalQuantity;
                } else {
                    this.state.portfolio.push({ 
                        ...stock, 
                        quantity, 
                        avgPrice: stock.price,
                        purchaseTime: Date.now()
                    });
                }
                
                // Record trade
                this.recordTrade('buy', stock, quantity, stock.price, brokerage);
                
                this.showNotification(
                    `✅ Bought ${quantity} ${stock.symbol} @ ₹${stock.price.toFixed(2)} (Total: ₹${totalAmount.toFixed(2)})`, 
                    'success'
                );
            }

            executeSellOrder(stock, quantity, totalAmount, brokerage, holding) {
                this.state.balance += (totalAmount - brokerage);
                holding.quantity -= quantity;
                
                if (holding.quantity === 0) {
                    this.state.portfolio = this.state.portfolio.filter(p => p.symbol !== stock.symbol);
                }
                
                // Calculate P&L for this trade
                const buyPrice = holding.avgPrice * quantity;
                const sellPrice = stock.price * quantity;
                const tradePnL = sellPrice - buyPrice - brokerage;
                
                // Record trade
                this.recordTrade('sell', stock, quantity, stock.price, brokerage, tradePnL);
                
                this.showNotification(
                    `✅ Sold ${quantity} ${stock.symbol} @ ₹${stock.price.toFixed(2)} | P&L: ${tradePnL >= 0 ? '+' : ''}₹${tradePnL.toFixed(2)}`, 
                    tradePnL >= 0 ? 'success' : 'warning'
                );
            }

            recordTrade(action, stock, quantity, price, brokerage, pnl = null) {
                this.state.tradeHistory.push({
                    id: Date.now() + Math.random(),
                    action,
                    symbol: stock.symbol,
                    quantity,
                    price,
                    brokerage,
                    pnl,
                    timestamp: Date.now(),
                    sector: stock.sector
                });
            }

            checkAutoProgression() {
                const totalTrades = this.state.tradeHistory.length;
                const portfolioValue = this.calculatePortfolioValue();
                const totalValue = this.state.balance + portfolioValue;
                
                // Auto-show results after significant milestones
                if (totalTrades >= 15 || 
                    this.state.portfolio.length >= 6 || 
                    Math.abs(totalValue - this.state.initialBalance) > 20000) {
                    
                    setTimeout(() => {
                        this.showNotification('📊 Great progress! Ready to see your results?', 'info', 3000);
                        setTimeout(() => this.showResult(), 5000);
                    }, 1000);
                }
            }

            // ========== ENHANCED MISSION SYSTEM ==========
            checkAndUpdateMissions() {
                const completedBefore = this.state.missions.filter(m => m.completed).length;
                
                this.state.missions = this.state.missions.map(mission => {
                    if (mission.completed) return mission;
                    
                    switch (mission.type) {
                        case 'first_trade':
                            if (this.state.tradeHistory.length >= 1) {
                                this.showNotification(`🏆 Mission Complete: ${mission.title}!`, 'success');
                                return { ...mission, completed: true };
                            }
                            break;
                            
                        case 'diversification':
                            const uniqueSectors = new Set(this.state.portfolio.map(p => p.sector));
                            if (uniqueSectors.size >= 3) {
                                this.showNotification(`🏆 Mission Complete: ${mission.title}!`, 'success');
                                return { ...mission, completed: true };
                            }
                            break;
                            
                        case 'trade_volume':
                            if (this.state.tradeHistory.length >= 8) {
                                this.showNotification(`🏆 Mission Complete: ${mission.title}!`, 'success');
                                return { ...mission, completed: true };
                            }
                            break;
                            
                        case 'profitability':
                            const totalValue = this.state.balance + this.calculatePortfolioValue();
                            if (totalValue > this.state.initialBalance * 1.02) { // 2% profit
                                this.showNotification(`🏆 Mission Complete: ${mission.title}!`, 'success');
                                return { ...mission, completed: true };
                            }
                            break;
                    }
                    return mission;
                });

                const completedAfter = this.state.missions.filter(m => m.completed).length;
                
                // Update mission progress bar
                const progressBar = document.getElementById('mission-progress');
                const completedMissions = document.getElementById('completed-missions');
                if (progressBar) {
                    progressBar.style.width = `${(completedAfter / this.state.missions.length) * 100}%`;
                }
                if (completedMissions) {
                    completedMissions.textContent = completedAfter;
                }

                // Bonus for mission completion
                if (completedAfter > completedBefore) {
                    this.state.balance += 500; // Bonus money
                }
            }

            renderMissions() {
                const missionsList = document.getElementById('missions-list');
                if (!missionsList) return;
                
                missionsList.innerHTML = '';

                this.state.missions.forEach(mission => {
                    const progress = this.getMissionProgress(mission);
                    
                    const missionItem = document.createElement('div');
                    missionItem.className = `p-4 rounded-xl border-2 transition-all duration-300 ${
                        mission.completed 
                            ? 'bg-green-50 border-green-300 shadow-sm' 
                            : 'bg-gray-50 border-gray-200 hover:bg-gray-100 hover:border-gray-300'
                    }`;
                    
                    missionItem.innerHTML = `
                        <div class="flex items-start gap-3">
                            <div class="w-6 h-6 rounded-full mt-0.5 flex items-center justify-center text-xs font-bold ${
                                mission.completed ? 'bg-green-500 text-white' : 'bg-gray-300 text-gray-600'
                            }">
                                ${mission.completed ? '✓' : mission.id}
                            </div>
                            <div class="flex-1">
                                <div class="font-semibold text-sm ${mission.completed ? 'text-green-800' : 'text-gray-700'} mb-1">
                                    ${mission.title}
                                </div>
                                <div class="text-xs text-gray-600 mb-2">${mission.description}</div>
                                <div class="flex items-center justify-between">
                                    <span class="text-xs font-medium ${mission.completed ? 'text-green-600' : 'text-gray-500'}">
                                        ${mission.reward}
                                    </span>
                                    ${!mission.completed ? `
                                        <span class="text-xs text-blue-600 font-medium">${progress}</span>
                                    ` : ''}
                                </div>
                                ${!mission.completed ? `
                                    <div class="w-full bg-gray-200 rounded-full h-1.5 mt-2">
                                        <div class="bg-blue-500 h-1.5 rounded-full transition-all duration-500" style="width: ${this.getMissionProgressPercent(mission)}%"></div>
                                    </div>
                                ` : ''}
                            </div>
                        </div>
                    `;
                    
                    missionsList.appendChild(missionItem);
                });
            }

            getMissionProgress(mission) {
                switch (mission.type) {
                    case 'first_trade':
                        return this.state.tradeHistory.length >= 1 ? 'Complete!' : 'Make a trade';
                    case 'diversification':
                        const uniqueSectors = new Set(this.state.portfolio.map(p => p.sector));
                        return `${uniqueSectors.size}/3 sectors`;
                    case 'trade_volume':
                        return `${this.state.tradeHistory.length}/8 trades`;
                    case 'profitability':
                        const totalValue = this.state.balance + this.calculatePortfolioValue();
                        const profit = totalValue - this.state.initialBalance;
                        const targetProfit = this.state.initialBalance * 0.02;
                        return profit >= targetProfit ? 'Complete!' : `₹${(targetProfit - profit).toFixed(0)} to go`;
                    default:
                        return 'In progress';
                }
            }

            getMissionProgressPercent(mission) {
                switch (mission.type) {
                    case 'first_trade':
                        return this.state.tradeHistory.length >= 1 ? 100 : 0;
                    case 'diversification':
                        const uniqueSectors = new Set(this.state.portfolio.map(p => p.sector));
                        return Math.min((uniqueSectors.size / 3) * 100, 100);
                    case 'trade_volume':
                        return Math.min((this.state.tradeHistory.length / 8) * 100, 100);
                    case 'profitability':
                        const totalValue = this.state.balance + this.calculatePortfolioValue();
                        const profit = totalValue - this.state.initialBalance;
                        const targetProfit = this.state.initialBalance * 0.02;
                        return Math.min(Math.max((profit / targetProfit) * 100, 0), 100);
                    default:
                        return 0;
                }
            }

            // ========== ENHANCED DISPLAY UPDATES ==========
            updateAllDisplays() {
                this.updateBalanceDisplay();
                this.updatePortfolioDisplay();
                this.updatePnLDisplay();
                this.updateTradeCountDisplay();
            }

            updateBalanceDisplay() {
                const balanceDisplay = document.getElementById('balance-display');
                if (balanceDisplay) {
                    balanceDisplay.textContent = this.state.balance.toLocaleString('en-IN');
                }
            }

            updatePortfolioDisplay() {
                const portfolioCount = document.getElementById('portfolio-count');
                const portfolioPanel = document.getElementById('portfolio-panel');
                const portfolioList = document.getElementById('portfolio-list');
                const portfolioValueDisplay = document.getElementById('portfolio-value-display');
                const portfolioTotal = document.getElementById('portfolio-total');
                const portfolioPerformance = document.getElementById('portfolio-performance');
                
                if (portfolioCount) {
                    portfolioCount.textContent = this.state.portfolio.length;
                }

                const totalPortfolioValue = this.calculatePortfolioValue();
                
                if (portfolioValueDisplay) {
                    portfolioValueDisplay.textContent = totalPortfolioValue.toLocaleString('en-IN');
                }

                if (this.state.portfolio.length > 0) {
                    if (portfolioPanel) portfolioPanel.classList.remove('hidden');
                    
                    if (portfolioList) {
                        portfolioList.innerHTML = '';
                        
                        // Calculate total invested amount
                        const totalInvested = this.state.portfolio.reduce((sum, holding) => 
                            sum + (holding.avgPrice * holding.quantity), 0);
                        const portfolioPnLPercent = totalInvested > 0 ? 
                            ((totalPortfolioValue - totalInvested) / totalInvested) * 100 : 0;
                        
                        if (portfolioTotal) {
                            portfolioTotal.textContent = totalPortfolioValue.toLocaleString('en-IN');
                        }
                        if (portfolioPerformance) {
                            portfolioPerformance.textContent = `${portfolioPnLPercent >= 0 ? '+' : ''}${portfolioPnLPercent.toFixed(2)}%`;
                            portfolioPerformance.className = `font-semibold ${portfolioPnLPercent >= 0 ? 'text-green-600' : 'text-red-600'}`;
                        }
                        
                        this.state.portfolio
                            .sort((a, b) => {
                                const aValue = this.stockDatabase.find(s => s.symbol === a.symbol)?.price * a.quantity || 0;
                                const bValue = this.stockDatabase.find(s => s.symbol === b.symbol)?.price * b.quantity || 0;
                                return bValue - aValue;
                            })
                            .forEach(holding => {
                                const currentStock = this.stockDatabase.find(s => s.symbol === holding.symbol);
                                const currentValue = currentStock ? currentStock.price * holding.quantity : 0;
                                const investedValue = holding.avgPrice * holding.quantity;
                                const pnl = currentValue - investedValue;
                                const pnlPercent = (pnl / investedValue) * 100;
                                
                                const portfolioItem = document.createElement('div');
                                portfolioItem.className = 'bg-gray-50 hover:bg-gray-100 p-4 rounded-xl border border-gray-200 hover:shadow-sm transition-all duration-200 cursor-pointer';
                                portfolioItem.onclick = () => this.selectStock(currentStock);
                                
                                portfolioItem.innerHTML = `
                                    <div class="flex justify-between items-center">
                                        <div>
                                            <div class="font-semibold text-sm text-gray-900 flex items-center gap-2">
                                                ${holding.symbol}
                                                <span class="text-xs bg-${this.getSectorColor(holding.sector)}-100 text-${this.getSectorColor(holding.sector)}-700 px-2 py-0.5 rounded-full">${holding.sector}</span>
                                            </div>
                                            <div class="text-xs text-gray-600 mt-1">
                                                ${holding.quantity} shares @ ₹${holding.avgPrice.toFixed(2)}
                                            </div>
                                            <div class="text-xs text-gray-500 mt-1">
                                                Current: ₹${currentStock?.price.toFixed(2) || '0.00'}
                                            </div>
                                        </div>
                                        <div class="text-right">
                                            <div class="font-semibold text-sm text-gray-900">₹${currentValue.toFixed(2)}</div>
                                            <div class="text-xs font-medium ${pnl >= 0 ? 'text-green-600' : 'text-red-600'}">
                                                ${pnl >= 0 ? '+' : ''}₹${pnl.toFixed(2)}
                                            </div>
                                            <div class="text-xs font-medium ${pnlPercent >= 0 ? 'text-green-600' : 'text-red-600'}">
                                                ${pnlPercent >= 0 ? '+' : ''}${pnlPercent.toFixed(2)}%
                                            </div>
                                        </div>
                                    </div>
                                `;
                                
                                portfolioList.appendChild(portfolioItem);
                            });
                    }
                } else {
                    if (portfolioPanel) portfolioPanel.classList.add('hidden');
                }
            }

            updatePnLDisplay() {
                const pnlDisplay = document.getElementById('pnl-display');
                const pnlBadge = document.getElementById('pnl-badge');
                
                if (!pnlDisplay) return;

                const totalPortfolioValue = this.calculatePortfolioValue();
                const totalValue = this.state.balance + totalPortfolioValue;
                const totalPnL = totalValue - this.state.initialBalance;
                const pnlPercent = (totalPnL / this.state.initialBalance) * 100;
                
                pnlDisplay.textContent = `${totalPnL >= 0 ? '+' : ''}₹${totalPnL.toFixed(0)}`;
                
                if (pnlBadge) {
                    const badgeClass = totalPnL >= 1000 ? 'from-green-100 to-green-200 text-green-800' :
                                     totalPnL >= 0 ? 'from-blue-100 to-blue-200 text-blue-800' :
                                     'from-red-100 to-red-200 text-red-800';
                    pnlBadge.className = `bg-gradient-to-r ${badgeClass} px-4 py-2 rounded-xl font-semibold shadow-sm`;
                }
            }

            updateTradeCountDisplay() {
                const tradeCountDisplay = document.getElementById('trade-count-display');
                if (tradeCountDisplay) {
                    tradeCountDisplay.textContent = this.state.tradeHistory.length;
                }
            }

            calculatePortfolioValue() {
                return this.state.portfolio.reduce((sum, holding) => {
                    const currentStock = this.stockDatabase.find(s => s.symbol === holding.symbol);
                    return sum + (currentStock ? currentStock.price * holding.quantity : 0);
                }, 0);
            }

            // ========== MARKET INSIGHTS SYSTEM ==========
            updateMarketInsights() {
                const topGainer = this.stockDatabase.reduce((max, stock) => 
                    stock.changePercent > max.changePercent ? stock : max, this.stockDatabase[0]);
                
                const topLoser = this.stockDatabase.reduce((min, stock) => 
                    stock.changePercent < min.changePercent ? stock : min, this.stockDatabase[0]);
                
                const mostActive = this.stockDatabase[Math.floor(Math.random() * this.stockDatabase.length)];
                
                const topGainerEl = document.getElementById('top-gainer');
                const topLoserEl = document.getElementById('top-loser');
                const mostActiveEl = document.getElementById('most-active');
                const sentimentBar = document.getElementById('sentiment-bar');
                const sentimentText = document.getElementById('sentiment-text');
                
                if (topGainerEl) {
                    topGainerEl.textContent = `${topGainer.symbol} +${topGainer.changePercent.toFixed(2)}%`;
                }
                if (topLoserEl) {
                    topLoserEl.textContent = `${topLoser.symbol} ${topLoser.changePercent.toFixed(2)}%`;
                }
                if (mostActiveEl) {
                    mostActiveEl.textContent = mostActive.symbol;
                }
                
                // Update market sentiment
                const bullishStocks = this.stockDatabase.filter(s => s.changePercent > 0).length;
                const sentimentPercent = (bullishStocks / this.stockDatabase.length) * 100;
                
                if (sentimentBar) {
                    sentimentBar.style.width = `${sentimentPercent}%`;
                    sentimentBar.className = `h-2 rounded-full transition-all duration-500 ${
                        sentimentPercent > 60 ? 'bg-green-500' : 
                        sentimentPercent > 40 ? 'bg-yellow-500' : 'bg-red-500'
                    }`;
                }
                
                if (sentimentText) {
                    const sentiment = sentimentPercent > 60 ? 'Bullish' : 
                                    sentimentPercent > 40 ? 'Neutral' : 'Bearish';
                    sentimentText.textContent = sentiment;
                    sentimentText.className = `text-xs font-medium ${
                        sentimentPercent > 60 ? 'text-green-600' : 
                        sentimentPercent > 40 ? 'text-yellow-600' : 'text-red-600'
                    }`;
                }
            }

            // ========== ENHANCED COACH SYSTEM ==========
            updateCoachTip(context, stock = null) {
                const tipElement = document.getElementById('coach-tip');
                if (!tipElement) return;
                
                let tip = '';
                
                switch (context) {
                    case 'stock_selected':
                        tip = `🎯 You selected ${stock.symbol} from ${stock.sector} sector. Current trend: ${stock.trend}. Price: ₹${stock.price.toFixed(2)}`;
                        break;
                    case 'buy':
                        tip = this.getRandomTip(this.coachDatabase.contextual.buy, stock);
                        break;
                    case 'sell':
                        tip = this.getRandomTip(this.coachDatabase.contextual.sell, stock);
                        break;
                    default:
                        tip = this.getRandomTip(this.coachDatabase.welcome);
                }
                
                this.animateCoachTip(tipElement, tip);
            }

            getRandomTip(tips, stock = null) {
                const tip = tips[Math.floor(Math.random() * tips.length)];
                if (stock) {
                    return tip.replace('{price}', stock.price.toFixed(2))
                             .replace('{sentiment}', this.state.marketSentiment);
                }
                return tip;
            }

            animateCoachTip(element, newTip) {
                element.style.opacity = '0.5';
                element.style.transform = 'translateY(-5px)';
                setTimeout(() => {
                    element.innerHTML = newTip;
                    element.style.opacity = '1';
                    element.style.transform = 'translateY(0)';
                }, 300);
            }

            rotateCoachTip() {
                const tips = [
                    ...this.coachDatabase.welcome,
                    ...this.coachDatabase.market,
                    ...this.coachDatabase.risk
                ];
                const randomTip = tips[Math.floor(Math.random() * tips.length)];
                this.updateCoachTip('random', null, randomTip);
            }

            getMarketAnalysis() {
                const analysis = this.generateMarketAnalysis();
                this.updateCoachTip('analysis', null, analysis);
            }

            getRiskAdvice() {
                const advice = this.getRandomTip(this.coachDatabase.risk);
                this.updateCoachTip('risk', null, advice);
            }

            generateMarketAnalysis() {
                const bullishCount = this.stockDatabase.filter(s => s.changePercent > 0).length;
                const avgChange = this.stockDatabase.reduce((sum, s) => sum + s.changePercent, 0) / this.stockDatabase.length;
                
                if (bullishCount > this.stockDatabase.length * 0.7) {
                    return `📈 Strong bullish market! ${bullishCount}/${this.stockDatabase.length} stocks are up. Average gain: +${avgChange.toFixed(2)}%`;
                } else if (bullishCount < this.stockDatabase.length * 0.3) {
                    return `📉 Bearish sentiment detected. Only ${bullishCount}/${this.stockDatabase.length} stocks positive. Avg: ${avgChange.toFixed(2)}%`;
                } else {
                    return `📊 Mixed market conditions. ${bullishCount}/${this.stockDatabase.length} stocks up. Consider selective buying.`;
                }
            }

            // ========== ENHANCED RESULT PAGE ==========
            updateResultPage() {
                const totalPortfolioValue = this.calculatePortfolioValue();
                const totalValue = this.state.balance + totalPortfolioValue;
                const totalPnL = totalValue - this.state.initialBalance;
                const returnPercent = (totalPnL / this.state.initialBalance) * 100;
                
                this.updateSessionDuration();

                // Update basic stats
                this.updateElement('final-balance', this.state.balance.toLocaleString('en-IN'));
                this.updateElement('portfolio-value', totalPortfolioValue.toLocaleString('en-IN'));
                this.updateElement('return-percentage', `${returnPercent >= 0 ? '+' : ''}${returnPercent.toFixed(2)}%`);
                
                const totalPnLDisplay = document.getElementById('total-pnl-display');
                if (totalPnLDisplay) {
                    totalPnLDisplay.textContent = `${totalPnL >= 0 ? '+' : ''}₹${totalPnL.toFixed(2)}`;
                    totalPnLDisplay.className = `text-3xl font-bold mb-2 ${totalPnL >= 0 ? 'text-green-400' : 'text-red-400'}`;
                }

                // Update trading statistics
                this.updateTradingStats();
                this.updateTradingGrade(returnPercent, totalPnL);
                this.updateLearningPoints(returnPercent, totalPnL);
                this.updateResultTitle(returnPercent);
            }

            updateTradingStats() {
                const uniqueStocks = new Set(this.state.tradeHistory.map(t => t.symbol)).size;
                const completedMissions = this.state.missions.filter(m => m.completed).length;
                const bestStock = this.getBestPerformingStock();
                
                this.updateElement('total-trades-result', this.state.tradeHistory.length);
                this.updateElement('unique-stocks-result', uniqueStocks);
                this.updateElement('session-duration', `${Math.floor(this.state.sessionDuration / 60)}m ${this.state.sessionDuration % 60}s`);
                this.updateElement('missions-completed-result', `${completedMissions}/${this.state.missions.length}`);
                this.updateElement('best-stock', bestStock || '--');
            }

            getBestPerformingStock() {
                if (this.state.portfolio.length === 0) return null;
                
                let bestStock = null;
                let bestReturn = -Infinity;
                
                this.state.portfolio.forEach(holding => {
                    const currentStock = this.stockDatabase.find(s => s.symbol === holding.symbol);
                    if (currentStock) {
                        const returnPercent = ((currentStock.price - holding.avgPrice) / holding.avgPrice) * 100;
                        if (returnPercent > bestReturn) {
                            bestReturn = returnPercent;
                            bestStock = `${holding.symbol} (+${returnPercent.toFixed(2)}%)`;
                        }
                    }
                });
                
                return bestStock;
            }

            updateTradingGrade(returnPercent, totalPnL) {
                const gradeElement = document.getElementById('trading-grade');
                const gradeDescription = document.getElementById('grade-description');
                
                if (!gradeElement || !gradeDescription) return;
                
                let grade, description, bgClass;
                
                if (returnPercent >= 10) {
                    grade = 'A+';
                    description = 'Outstanding! Exceptional trading performance with excellent returns.';
                    bgClass = 'bg-gradient-to-r from-yellow-400 to-orange-500';
                } else if (returnPercent >= 5) {
                    grade = 'A';
                    description = 'Excellent! Strong trading skills with solid positive returns.';
                    bgClass = 'bg-gradient-to-r from-green-400 to-green-500';
                } else if (returnPercent >= 2) {
                    grade = 'B+';
                    description = 'Very Good! Profitable trading with room for improvement.';
                    bgClass = 'bg-gradient-to-r from-blue-400 to-blue-500';
                } else if (returnPercent >= 0) {
                    grade = 'B';
                    description = 'Good! You managed to avoid losses - that\'s already better than many traders.';
                    bgClass = 'bg-gradient-to-r from-indigo-400 to-indigo-500';
                } else if (returnPercent >= -5) {
                    grade = 'C+';
                    description = 'Learning Phase! Small losses are part of the learning process.';
                    bgClass = 'bg-gradient-to-r from-yellow-500 to-orange-500';
                } else {
                    grade = 'C';
                    description = 'Keep Learning! Every loss is a lesson. Practice makes perfect!';
                    bgClass = 'bg-gradient-to-r from-gray-400 to-gray-500';
                }
                
                gradeElement.textContent = grade;
                gradeElement.className = `w-24 h-24 rounded-full ${bgClass} flex items-center justify-center text-4xl font-bold text-white shadow-lg animate-pulse-glow`;
                gradeDescription.textContent = description;
            }

            updateLearningPoints(returnPercent, totalPnL) {
                const learningPointsList = document.getElementById('learning-points-list');
                if (!learningPointsList) return;
                
                learningPointsList.innerHTML = '';
                const points = this.generatePersonalizedLearningPoints(returnPercent, totalPnL);

                points.forEach((point, index) => {
                    const li = document.createElement('li');
                    li.className = 'flex items-start gap-3 opacity-0 animate-fade-in-up';
                    li.style.animationDelay = `${index * 0.1}s`;
                    li.style.animationFillMode = 'forwards';
                    li.innerHTML = `
                        <span class="text-green-400 mt-1 text-lg">•</span>
                        <span class="leading-relaxed">${point}</span>
                    `;
                    learningPointsList.appendChild(li);
                });
            }

            generatePersonalizedLearningPoints(returnPercent, totalPnL) {
                const points = [];
                const uniqueSectors = new Set(this.state.portfolio.map(p => p.sector)).size;
                const avgTradeSize = this.state.tradeHistory.length > 0 ? 
                    this.state.tradeHistory.reduce((sum, t) => sum + (t.price * t.quantity), 0) / this.state.tradeHistory.length : 0;
                
                // Performance-based insights
                if (returnPercent >= 5) {
                    points.push('🏆 Excellent returns! You demonstrated strong stock selection and timing skills.');
                    points.push('📈 Your trading strategy was effective - consider similar approaches with real money.');
                } else if (returnPercent >= 0) {
                    points.push('✅ Positive returns achieved! You avoided common beginner mistakes.');
                    points.push('📊 Your risk management kept you profitable - a crucial trading skill.');
                } else {
                    points.push('📖 Losses are learning opportunities - analyze what went wrong and improve.');
                    points.push('💡 Consider holding periods and avoid emotional trading decisions.');
                }

                // Diversification insights
                if (uniqueSectors >= 4) {
                    points.push('🎯 Excellent diversification! You spread risk across multiple sectors effectively.');
                } else if (uniqueSectors >= 2) {
                    points.push('👍 Good diversification start - consider adding more sectors for better risk management.');
                } else {
                    points.push('⚠️ Diversification tip: Spread investments across different sectors to reduce risk.');
                }

                // Trading behavior insights
                if (this.state.tradeHistory.length >= 10) {
                    points.push('⚡ You were very active! Remember: more trades = higher costs in real trading.');
                } else if (this.state.tradeHistory.length >= 5) {
                    points.push('⚖️ Balanced trading frequency - you found a good middle ground.');
                } else {
                    points.push('🕒 Patient approach! Sometimes fewer, well-timed trades are more profitable.');
                }

                // Advanced insights
                const profitableTrades = this.state.tradeHistory.filter(t => t.pnl && t.pnl > 0).length;
                const sellTrades = this.state.tradeHistory.filter(t => t.action === 'sell').length;
                
                if (sellTrades > 0) {
                    const winRate = (profitableTrades / sellTrades) * 100;
                    points.push(`🎯 Win rate: ${winRate.toFixed(1)}% - ${winRate >= 60 ? 'Excellent!' : winRate >= 40 ? 'Good start!' : 'Keep practicing!'}`);
                }

                points.push('📚 Ready for real trading? Start small and gradually increase your positions.');
                points.push('🎓 Continue learning about fundamental and technical analysis for better decisions.');

                return points;
            }

            updateResultTitle(returnPercent) {
                const resultTitle = document.getElementById('result-title');
                const resultEmoji = document.getElementById('result-emoji');
                
                if (!resultTitle || !resultEmoji) return;
                
                if (returnPercent >= 10) {
                    resultTitle.textContent = 'Outstanding Performance! 🚀';
                    resultEmoji.textContent = '🏆';
                } else if (returnPercent >= 5) {
                    resultTitle.textContent = 'Excellent Trading! 🎉';
                    resultEmoji.textContent = '🎉';
                } else if (returnPercent >= 0) {
                    resultTitle.textContent = 'Great Job! 👏';
                    resultEmoji.textContent = '👏';
                } else {
                    resultTitle.textContent = 'Learning Experience! 📚';
                    resultEmoji.textContent = '📚';
                }
            }

            // ========== NOTIFICATION SYSTEM ==========
            showNotification(message, type = 'success', duration = 4000) {
                const container = document.getElementById('notification-container');
                if (!container) return;

                const notification = document.createElement('div');
                const notificationId = Date.now() + Math.random();
                
                const bgColors = {
                    success: 'bg-green-500',
                    error: 'bg-red-500',
                    warning: 'bg-yellow-500',
                    info: 'bg-blue-500'
                };

                notification.className = `${bgColors[type]} text-white px-6 py-3 rounded-xl shadow-lg transform translate-x-full transition-all duration-300 mb-2 max-w-sm`;
                notification.innerHTML = `
                    <div class="flex items-center justify-between">
                        <span class="text-sm font-medium">${message}</span>
                        <button onclick="this.parentElement.parentElement.remove()" class="ml-3 text-white hover:text-gray-200">✕</button>
                    </div>
                `;
                
                container.appendChild(notification);
                
                // Animate in
                setTimeout(() => {
                    notification.style.transform = 'translateX(0)';
                }, 100);
                
                // Auto remove
                setTimeout(() => {
                    if (notification.parentNode) {
                        notification.style.transform = 'translateX(100%)';
                        setTimeout(() => notification.remove(), 300);
                    }
                }, duration);

                this.notifications.push(notificationId);
            }

            clearNotifications() {
                const container = document.getElementById('notification-container');
                if (container) {
                    container.innerHTML = '';
                }
                this.notifications = [];
            }

            // ========== UTILITY FUNCTIONS ==========
            updateElement(id, value) {
                const element = document.getElementById(id);
                if (element) element.textContent = value;
            }

            updateSessionDuration() {
                this.state.sessionDuration = Math.floor((Date.now() - this.state.startTime) / 1000);
            }

            showLoadingOverlay() {
                const overlay = document.getElementById('loading-overlay');
                if (overlay) overlay.classList.remove('hidden');
            }

            hideLoadingOverlay() {
                const overlay = document.getElementById('loading-overlay');
                if (overlay) overlay.classList.add('hidden');
            }

            shareResults() {
                const totalValue = this.state.balance + this.calculatePortfolioValue();
                const returnPercent = ((totalValue - this.state.initialBalance) / this.state.initialBalance) * 100;
                const completedMissions = this.state.missions.filter(m => m.completed).length;
                
                const shareText = `🎯 Just completed my trading simulation!
📊 Return: ${returnPercent >= 0 ? '+' : ''}${returnPercent.toFixed(2)}%
💰 Portfolio Value: ₹${totalValue.toLocaleString('en-IN')}
🏆 Missions: ${completedMissions}/${this.state.missions.length}
📈 Trades: ${this.state.tradeHistory.length}

Ready to start real trading! #TradingSimulation #StockMarket`;

                if (navigator.share) {
                    navigator.share({
                        title: 'My Trading Simulation Results',
                        text: shareText
                    });
                } else {
                    navigator.clipboard.writeText(shareText).then(() => {
                        this.showNotification('📋 Results copied to clipboard!', 'success', 2000);
                    });
                }
            }

            // ========== ADVANCED FEATURES ==========
            getMarketSummary() {
                const summary = {
                    totalStocks: this.stockDatabase.length,
                    gainers: this.stockDatabase.filter(s => s.changePercent > 0).length,
                    losers: this.stockDatabase.filter(s => s.changePercent < 0).length,
                    unchanged: this.stockDatabase.filter(s => s.changePercent === 0).length,
                    topGainer: this.stockDatabase.reduce((max, stock) => 
                        stock.changePercent > max.changePercent ? stock : max, this.stockDatabase[0]),
                    topLoser: this.stockDatabase.reduce((min, stock) => 
                        stock.changePercent < min.changePercent ? stock : min, this.stockDatabase[0])
                };
                return summary;
            }

            exportTradingData() {
                const data = {
                    sessionSummary: {
                        startTime: new Date(this.state.startTime).toISOString(),
                        duration: this.state.sessionDuration,
                        initialBalance: this.state.initialBalance,
                        finalBalance: this.state.balance,
                        portfolioValue: this.calculatePortfolioValue(),
                        totalReturn: (this.state.balance + this.calculatePortfolioValue()) - this.state.initialBalance
                    },
                    tradeHistory: this.state.tradeHistory,
                    portfolio: this.state.portfolio,
                    missions: this.state.missions
                };
                
                const dataStr = JSON.stringify(data, null, 2);
                const dataBlob = new Blob([dataStr], { type: 'application/json' });
                const url = URL.createObjectURL(dataBlob);
                
                const link = document.createElement('a');
                link.href = url;
                link.download = `trading-session-${new Date().toISOString().split('T')[0]}.json`;
                link.click();
                
                URL.revokeObjectURL(url);
                this.showNotification('📊 Trading data exported successfully!', 'success');
            }
        }

        // ========== GLOBAL APP INSTANCE ==========
        let TradingApp;

        // ========== INITIALIZATION ==========
        document.addEventListener('DOMContentLoaded', function() {
            // Show loading screen
            document.body.style.opacity = '0';
            
            setTimeout(() => {
                TradingApp = new AdvancedTradingSimulator();
                document.body.style.transition = 'opacity 0.5s ease';
                document.body.style.opacity = '1';
                console.log('🚀 Advanced Trading Simulator Ready!');
            }, 500);
            
            // Add keyboard shortcut hints
            console.log(`
🎮 Keyboard Shortcuts:
- ESC: Exit current screen
- Ctrl+R: Reset simulation (on results page)
            `);
        });

        // ========== ENHANCED ERROR HANDLING ==========
        window.addEventListener('error', function(e) {
            console.error('Trading App Error:', e.error);
            if (TradingApp) {
                TradingApp.showNotification('⚠️ Something went wrong. Please refresh the page.', 'error', 5000);
            }
        });

        // ========== PERFORMANCE MONITORING ==========
        let performanceMetrics = {
            startTime: Date.now(),
            interactions: 0,
            errors: 0
        };

        document.addEventListener('click', () => {
            performanceMetrics.interactions++;
        });

        // Export for debugging
        window.TradingApp = TradingApp;
        window.getPerformanceMetrics = () => performanceMetrics;
    </script>
</body>
</html>